// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/activity_rewards.proto

#include "proto/activity_rewards.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pxd {
namespace proto {
constexpr AuthoredActivityReward::AuthoredActivityReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : craftedrecipeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , moveid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , animationid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , candytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , listtableid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0u)
  , generatedrecipequality_(0u)
  , armortype_(0u)
  , weight_(0u)
  , quantity_(PROTOBUF_LONGLONG(0)){}
struct AuthoredActivityRewardDefaultTypeInternal {
  constexpr AuthoredActivityRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthoredActivityRewardDefaultTypeInternal() {}
  union {
    AuthoredActivityReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthoredActivityRewardDefaultTypeInternal _AuthoredActivityReward_default_instance_;
constexpr ActivityReward::ActivityReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rewards_()
  , authoredid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ActivityRewardDefaultTypeInternal {
  constexpr ActivityRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityRewardDefaultTypeInternal() {}
  union {
    ActivityReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityRewardDefaultTypeInternal _ActivityReward_default_instance_;
}  // namespace proto
}  // namespace pxd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2factivity_5frewards_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2factivity_5frewards_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2factivity_5frewards_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2factivity_5frewards_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, type_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, generatedrecipequality_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, craftedrecipeid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, moveid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, armortype_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, animationid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, candytype_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, listtableid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, quantity_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredActivityReward, weight_),
  5,
  6,
  0,
  1,
  7,
  2,
  3,
  4,
  9,
  8,
  PROTOBUF_FIELD_OFFSET(::pxd::proto::ActivityReward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::ActivityReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::ActivityReward, authoredid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::ActivityReward, name_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::ActivityReward, rewards_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pxd::proto::AuthoredActivityReward)},
  { 25, 33, sizeof(::pxd::proto::ActivityReward)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_AuthoredActivityReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_ActivityReward_default_instance_),
};

const char descriptor_table_protodef_proto_2factivity_5frewards_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034proto/activity_rewards.proto\022\tpxd.prot"
  "o\"\341\001\n\026AuthoredActivityReward\022\014\n\004Type\030\001 \001"
  "(\r\022\036\n\026GeneratedRecipeQuality\030\002 \001(\r\022\027\n\017Cr"
  "aftedRecipeId\030\003 \001(\t\022\016\n\006MoveId\030\004 \001(\t\022\021\n\tA"
  "rmorType\030\005 \001(\r\022\023\n\013AnimationId\030\006 \001(\t\022\021\n\tC"
  "andyType\030\007 \001(\t\022\023\n\013ListTableId\030\010 \001(\t\022\020\n\010Q"
  "uantity\030\t \001(\003\022\016\n\006Weight\030\n \001(\r\"f\n\016Activit"
  "yReward\022\022\n\nAuthoredId\030\001 \001(\t\022\014\n\004Name\030\002 \001("
  "\t\0222\n\007Rewards\030\003 \003(\0132!.pxd.proto.AuthoredA"
  "ctivityRewardB\003\370\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2factivity_5frewards_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2factivity_5frewards_2eproto = {
  false, false, 378, descriptor_table_protodef_proto_2factivity_5frewards_2eproto, "proto/activity_rewards.proto", 
  &descriptor_table_proto_2factivity_5frewards_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_2factivity_5frewards_2eproto::offsets,
  file_level_metadata_proto_2factivity_5frewards_2eproto, file_level_enum_descriptors_proto_2factivity_5frewards_2eproto, file_level_service_descriptors_proto_2factivity_5frewards_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2factivity_5frewards_2eproto_getter() {
  return &descriptor_table_proto_2factivity_5frewards_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2factivity_5frewards_2eproto(&descriptor_table_proto_2factivity_5frewards_2eproto);
namespace pxd {
namespace proto {

// ===================================================================

class AuthoredActivityReward::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthoredActivityReward>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_generatedrecipequality(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_craftedrecipeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moveid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_armortype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_animationid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_candytype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_listtableid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AuthoredActivityReward::AuthoredActivityReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.AuthoredActivityReward)
}
AuthoredActivityReward::AuthoredActivityReward(const AuthoredActivityReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  craftedrecipeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_craftedrecipeid()) {
    craftedrecipeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_craftedrecipeid(), 
      GetArena());
  }
  moveid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_moveid()) {
    moveid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_moveid(), 
      GetArena());
  }
  animationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_animationid()) {
    animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_animationid(), 
      GetArena());
  }
  candytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_candytype()) {
    candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candytype(), 
      GetArena());
  }
  listtableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_listtableid()) {
    listtableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_listtableid(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:pxd.proto.AuthoredActivityReward)
}

void AuthoredActivityReward::SharedCtor() {
craftedrecipeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
moveid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
animationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
candytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
listtableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(quantity_));
}

AuthoredActivityReward::~AuthoredActivityReward() {
  // @@protoc_insertion_point(destructor:pxd.proto.AuthoredActivityReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthoredActivityReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  craftedrecipeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moveid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listtableid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthoredActivityReward::ArenaDtor(void* object) {
  AuthoredActivityReward* _this = reinterpret_cast< AuthoredActivityReward* >(object);
  (void)_this;
}
void AuthoredActivityReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthoredActivityReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthoredActivityReward::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.AuthoredActivityReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      craftedrecipeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      moveid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      animationid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      candytype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      listtableid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&armortype_) -
        reinterpret_cast<char*>(&type_)) + sizeof(armortype_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthoredActivityReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 GeneratedRecipeQuality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_generatedrecipequality(&has_bits);
          generatedrecipequality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string CraftedRecipeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_craftedrecipeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredActivityReward.CraftedRecipeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string MoveId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_moveid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredActivityReward.MoveId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ArmorType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_armortype(&has_bits);
          armortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AnimationId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_animationid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredActivityReward.AnimationId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string CandyType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_candytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredActivityReward.CandyType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ListTableId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_listtableid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredActivityReward.ListTableId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 Quantity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthoredActivityReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.AuthoredActivityReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 Type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 GeneratedRecipeQuality = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_generatedrecipequality(), target);
  }

  // optional string CraftedRecipeId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_craftedrecipeid().data(), static_cast<int>(this->_internal_craftedrecipeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredActivityReward.CraftedRecipeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_craftedrecipeid(), target);
  }

  // optional string MoveId = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_moveid().data(), static_cast<int>(this->_internal_moveid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredActivityReward.MoveId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_moveid(), target);
  }

  // optional uint32 ArmorType = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_armortype(), target);
  }

  // optional string AnimationId = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animationid().data(), static_cast<int>(this->_internal_animationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredActivityReward.AnimationId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_animationid(), target);
  }

  // optional string CandyType = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_candytype().data(), static_cast<int>(this->_internal_candytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredActivityReward.CandyType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_candytype(), target);
  }

  // optional string ListTableId = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_listtableid().data(), static_cast<int>(this->_internal_listtableid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredActivityReward.ListTableId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_listtableid(), target);
  }

  // optional int64 Quantity = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_quantity(), target);
  }

  // optional uint32 Weight = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.AuthoredActivityReward)
  return target;
}

size_t AuthoredActivityReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.AuthoredActivityReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string CraftedRecipeId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_craftedrecipeid());
    }

    // optional string MoveId = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_moveid());
    }

    // optional string AnimationId = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animationid());
    }

    // optional string CandyType = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_candytype());
    }

    // optional string ListTableId = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_listtableid());
    }

    // optional uint32 Type = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 GeneratedRecipeQuality = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_generatedrecipequality());
    }

    // optional uint32 ArmorType = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_armortype());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 Weight = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weight());
    }

    // optional int64 Quantity = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthoredActivityReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.AuthoredActivityReward)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthoredActivityReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthoredActivityReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.AuthoredActivityReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.AuthoredActivityReward)
    MergeFrom(*source);
  }
}

void AuthoredActivityReward::MergeFrom(const AuthoredActivityReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.AuthoredActivityReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_craftedrecipeid(from._internal_craftedrecipeid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_moveid(from._internal_moveid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_animationid(from._internal_animationid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_candytype(from._internal_candytype());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_listtableid(from._internal_listtableid());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      generatedrecipequality_ = from.generatedrecipequality_;
    }
    if (cached_has_bits & 0x00000080u) {
      armortype_ = from.armortype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthoredActivityReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.AuthoredActivityReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthoredActivityReward::CopyFrom(const AuthoredActivityReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.AuthoredActivityReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthoredActivityReward::IsInitialized() const {
  return true;
}

void AuthoredActivityReward::InternalSwap(AuthoredActivityReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  craftedrecipeid_.Swap(&other->craftedrecipeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  moveid_.Swap(&other->moveid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  animationid_.Swap(&other->animationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  candytype_.Swap(&other->candytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  listtableid_.Swap(&other->listtableid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthoredActivityReward, quantity_)
      + sizeof(AuthoredActivityReward::quantity_)
      - PROTOBUF_FIELD_OFFSET(AuthoredActivityReward, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthoredActivityReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2factivity_5frewards_2eproto_getter, &descriptor_table_proto_2factivity_5frewards_2eproto_once,
      file_level_metadata_proto_2factivity_5frewards_2eproto[0]);
}

// ===================================================================

class ActivityReward::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityReward>()._has_bits_);
  static void set_has_authoredid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActivityReward::ActivityReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.ActivityReward)
}
ActivityReward::ActivityReward(const ActivityReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authoredid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_authoredid()) {
    authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authoredid(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pxd.proto.ActivityReward)
}

void ActivityReward::SharedCtor() {
authoredid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActivityReward::~ActivityReward() {
  // @@protoc_insertion_point(destructor:pxd.proto.ActivityReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivityReward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  authoredid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityReward::ArenaDtor(void* object) {
  ActivityReward* _this = reinterpret_cast< ActivityReward* >(object);
  (void)_this;
}
void ActivityReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivityReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivityReward::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.ActivityReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      authoredid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string AuthoredId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_authoredid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.ActivityReward.AuthoredId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.ActivityReward.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pxd.proto.AuthoredActivityReward Rewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivityReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.ActivityReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string AuthoredId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authoredid().data(), static_cast<int>(this->_internal_authoredid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.ActivityReward.AuthoredId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authoredid(), target);
  }

  // optional string Name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.ActivityReward.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .pxd.proto.AuthoredActivityReward Rewards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rewards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.ActivityReward)
  return target;
}

size_t ActivityReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.ActivityReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pxd.proto.AuthoredActivityReward Rewards = 3;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string AuthoredId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authoredid());
    }

    // optional string Name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.ActivityReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivityReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivityReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.ActivityReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.ActivityReward)
    MergeFrom(*source);
  }
}

void ActivityReward::MergeFrom(const ActivityReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.ActivityReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_authoredid(from._internal_authoredid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
  }
}

void ActivityReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.ActivityReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityReward::CopyFrom(const ActivityReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.ActivityReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityReward::IsInitialized() const {
  return true;
}

void ActivityReward::InternalSwap(ActivityReward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rewards_.InternalSwap(&other->rewards_);
  authoredid_.Swap(&other->authoredid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2factivity_5frewards_2eproto_getter, &descriptor_table_proto_2factivity_5frewards_2eproto_once,
      file_level_metadata_proto_2factivity_5frewards_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pxd::proto::AuthoredActivityReward* Arena::CreateMaybeMessage< ::pxd::proto::AuthoredActivityReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::AuthoredActivityReward >(arena);
}
template<> PROTOBUF_NOINLINE ::pxd::proto::ActivityReward* Arena::CreateMaybeMessage< ::pxd::proto::ActivityReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::ActivityReward >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
