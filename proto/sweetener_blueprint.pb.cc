// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sweetener_blueprint.proto

#include "proto/sweetener_blueprint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pxd {
namespace proto {
constexpr AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUseDefaultTypeInternal {
  constexpr AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUseDefaultTypeInternal _AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse_default_instance_;
constexpr AuthoredSweetenerRewardChoice::AuthoredSweetenerRewardChoice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requiredcandy_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rewardstableid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , armorrewardstableid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , moverewardstableid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , baserollcount_(0u)
  , armorrollcount_(0u)
  , moverollcount_(0u){}
struct AuthoredSweetenerRewardChoiceDefaultTypeInternal {
  constexpr AuthoredSweetenerRewardChoiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthoredSweetenerRewardChoiceDefaultTypeInternal() {}
  union {
    AuthoredSweetenerRewardChoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthoredSweetenerRewardChoiceDefaultTypeInternal _AuthoredSweetenerRewardChoice_default_instance_;
constexpr SweetenerBlueprint::SweetenerBlueprint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rewardchoices_()
  , authoredid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(0u)
  , duration_(0u)
  , cookcost_(0u)
  , requiredsweetness_(0u){}
struct SweetenerBlueprintDefaultTypeInternal {
  constexpr SweetenerBlueprintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SweetenerBlueprintDefaultTypeInternal() {}
  union {
    SweetenerBlueprint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SweetenerBlueprintDefaultTypeInternal _SweetenerBlueprint_default_instance_;
}  // namespace proto
}  // namespace pxd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fsweetener_5fblueprint_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fsweetener_5fblueprint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fsweetener_5fblueprint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fsweetener_5fblueprint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, description_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, rewardstableid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, baserollcount_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, armorrewardstableid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, armorrollcount_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, moverewardstableid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, moverollcount_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredSweetenerRewardChoice, requiredcandy_),
  0,
  1,
  4,
  2,
  5,
  3,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, authoredid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, name_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, description_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, price_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, duration_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, cookcost_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, requiredsweetness_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::SweetenerBlueprint, rewardchoices_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse)},
  { 9, 22, sizeof(::pxd::proto::AuthoredSweetenerRewardChoice)},
  { 30, 43, sizeof(::pxd::proto::SweetenerBlueprint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_AuthoredSweetenerRewardChoice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_SweetenerBlueprint_default_instance_),
};

const char descriptor_table_protodef_proto_2fsweetener_5fblueprint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037proto/sweetener_blueprint.proto\022\tpxd.p"
  "roto\"\325\002\n\035AuthoredSweetenerRewardChoice\022\023"
  "\n\013Description\030\001 \001(\t\022\026\n\016RewardsTableId\030\002 "
  "\001(\t\022\025\n\rBaseRollCount\030\003 \001(\r\022\033\n\023ArmorRewar"
  "dsTableId\030\004 \001(\t\022\026\n\016ArmorRollCount\030\005 \001(\r\022"
  "\032\n\022MoveRewardsTableId\030\006 \001(\t\022\025\n\rMoveRollC"
  "ount\030\007 \001(\r\022R\n\rRequiredCandy\030\010 \003(\0132;.pxd."
  "proto.AuthoredSweetenerRewardChoice.Requ"
  "iredCandyEntry\0324\n\022RequiredCandyEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\"\332\001\n\022Sweeten"
  "erBlueprint\022\022\n\nAuthoredId\030\001 \001(\t\022\014\n\004Name\030"
  "\002 \001(\t\022\023\n\013Description\030\003 \001(\t\022\r\n\005Price\030\004 \001("
  "\r\022\020\n\010Duration\030\005 \001(\r\022\020\n\010CookCost\030\006 \001(\r\022\031\n"
  "\021RequiredSweetness\030\007 \001(\r\022\?\n\rRewardChoice"
  "s\030\010 \003(\0132(.pxd.proto.AuthoredSweetenerRew"
  "ardChoiceB\003\370\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fsweetener_5fblueprint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsweetener_5fblueprint_2eproto = {
  false, false, 614, descriptor_table_protodef_proto_2fsweetener_5fblueprint_2eproto, "proto/sweetener_blueprint.proto", 
  &descriptor_table_proto_2fsweetener_5fblueprint_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_proto_2fsweetener_5fblueprint_2eproto::offsets,
  file_level_metadata_proto_2fsweetener_5fblueprint_2eproto, file_level_enum_descriptors_proto_2fsweetener_5fblueprint_2eproto, file_level_service_descriptors_proto_2fsweetener_5fblueprint_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fsweetener_5fblueprint_2eproto_getter() {
  return &descriptor_table_proto_2fsweetener_5fblueprint_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fsweetener_5fblueprint_2eproto(&descriptor_table_proto_2fsweetener_5fblueprint_2eproto);
namespace pxd {
namespace proto {

// ===================================================================

AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse() {}
AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::MergeFrom(const AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsweetener_5fblueprint_2eproto_getter, &descriptor_table_proto_2fsweetener_5fblueprint_2eproto_once,
      file_level_metadata_proto_2fsweetener_5fblueprint_2eproto[0]);
}
void AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AuthoredSweetenerRewardChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthoredSweetenerRewardChoice>()._has_bits_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rewardstableid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baserollcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_armorrewardstableid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_armorrollcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_moverewardstableid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_moverollcount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

AuthoredSweetenerRewardChoice::AuthoredSweetenerRewardChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requiredcandy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.AuthoredSweetenerRewardChoice)
}
AuthoredSweetenerRewardChoice::AuthoredSweetenerRewardChoice(const AuthoredSweetenerRewardChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requiredcandy_.MergeFrom(from.requiredcandy_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  rewardstableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rewardstableid()) {
    rewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rewardstableid(), 
      GetArena());
  }
  armorrewardstableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_armorrewardstableid()) {
    armorrewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_armorrewardstableid(), 
      GetArena());
  }
  moverewardstableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_moverewardstableid()) {
    moverewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_moverewardstableid(), 
      GetArena());
  }
  ::memcpy(&baserollcount_, &from.baserollcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&moverollcount_) -
    reinterpret_cast<char*>(&baserollcount_)) + sizeof(moverollcount_));
  // @@protoc_insertion_point(copy_constructor:pxd.proto.AuthoredSweetenerRewardChoice)
}

void AuthoredSweetenerRewardChoice::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rewardstableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
armorrewardstableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
moverewardstableid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&baserollcount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&moverollcount_) -
    reinterpret_cast<char*>(&baserollcount_)) + sizeof(moverollcount_));
}

AuthoredSweetenerRewardChoice::~AuthoredSweetenerRewardChoice() {
  // @@protoc_insertion_point(destructor:pxd.proto.AuthoredSweetenerRewardChoice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthoredSweetenerRewardChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rewardstableid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  armorrewardstableid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moverewardstableid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthoredSweetenerRewardChoice::ArenaDtor(void* object) {
  AuthoredSweetenerRewardChoice* _this = reinterpret_cast< AuthoredSweetenerRewardChoice* >(object);
  (void)_this;
}
void AuthoredSweetenerRewardChoice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthoredSweetenerRewardChoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthoredSweetenerRewardChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.AuthoredSweetenerRewardChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredcandy_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rewardstableid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      armorrewardstableid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      moverewardstableid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&baserollcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moverollcount_) -
        reinterpret_cast<char*>(&baserollcount_)) + sizeof(moverollcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthoredSweetenerRewardChoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string Description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredSweetenerRewardChoice.Description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string RewardsTableId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rewardstableid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredSweetenerRewardChoice.RewardsTableId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 BaseRollCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_baserollcount(&has_bits);
          baserollcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ArmorRewardsTableId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_armorrewardstableid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredSweetenerRewardChoice.ArmorRewardsTableId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ArmorRollCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_armorrollcount(&has_bits);
          armorrollcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string MoveRewardsTableId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_moverewardstableid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredSweetenerRewardChoice.MoveRewardsTableId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MoveRollCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_moverollcount(&has_bits);
          moverollcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, uint32> RequiredCandy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&requiredcandy_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthoredSweetenerRewardChoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.AuthoredSweetenerRewardChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredSweetenerRewardChoice.Description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // optional string RewardsTableId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rewardstableid().data(), static_cast<int>(this->_internal_rewardstableid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredSweetenerRewardChoice.RewardsTableId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rewardstableid(), target);
  }

  // optional uint32 BaseRollCount = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_baserollcount(), target);
  }

  // optional string ArmorRewardsTableId = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_armorrewardstableid().data(), static_cast<int>(this->_internal_armorrewardstableid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredSweetenerRewardChoice.ArmorRewardsTableId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_armorrewardstableid(), target);
  }

  // optional uint32 ArmorRollCount = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_armorrollcount(), target);
  }

  // optional string MoveRewardsTableId = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_moverewardstableid().data(), static_cast<int>(this->_internal_moverewardstableid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredSweetenerRewardChoice.MoveRewardsTableId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_moverewardstableid(), target);
  }

  // optional uint32 MoveRollCount = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_moverollcount(), target);
  }

  // map<string, uint32> RequiredCandy = 8;
  if (!this->_internal_requiredcandy().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "pxd.proto.AuthoredSweetenerRewardChoice.RequiredCandyEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_requiredcandy().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_requiredcandy().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_requiredcandy().begin();
          it != this->_internal_requiredcandy().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_requiredcandy().begin();
          it != this->_internal_requiredcandy().end(); ++it) {
        target = AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.AuthoredSweetenerRewardChoice)
  return target;
}

size_t AuthoredSweetenerRewardChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.AuthoredSweetenerRewardChoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> RequiredCandy = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_requiredcandy_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_requiredcandy().begin();
      it != this->_internal_requiredcandy().end(); ++it) {
    total_size += AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string Description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string RewardsTableId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rewardstableid());
    }

    // optional string ArmorRewardsTableId = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_armorrewardstableid());
    }

    // optional string MoveRewardsTableId = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_moverewardstableid());
    }

    // optional uint32 BaseRollCount = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baserollcount());
    }

    // optional uint32 ArmorRollCount = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_armorrollcount());
    }

    // optional uint32 MoveRollCount = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_moverollcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthoredSweetenerRewardChoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.AuthoredSweetenerRewardChoice)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthoredSweetenerRewardChoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthoredSweetenerRewardChoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.AuthoredSweetenerRewardChoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.AuthoredSweetenerRewardChoice)
    MergeFrom(*source);
  }
}

void AuthoredSweetenerRewardChoice::MergeFrom(const AuthoredSweetenerRewardChoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.AuthoredSweetenerRewardChoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredcandy_.MergeFrom(from.requiredcandy_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_rewardstableid(from._internal_rewardstableid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_armorrewardstableid(from._internal_armorrewardstableid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_moverewardstableid(from._internal_moverewardstableid());
    }
    if (cached_has_bits & 0x00000010u) {
      baserollcount_ = from.baserollcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      armorrollcount_ = from.armorrollcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      moverollcount_ = from.moverollcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthoredSweetenerRewardChoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.AuthoredSweetenerRewardChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthoredSweetenerRewardChoice::CopyFrom(const AuthoredSweetenerRewardChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.AuthoredSweetenerRewardChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthoredSweetenerRewardChoice::IsInitialized() const {
  return true;
}

void AuthoredSweetenerRewardChoice::InternalSwap(AuthoredSweetenerRewardChoice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requiredcandy_.Swap(&other->requiredcandy_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rewardstableid_.Swap(&other->rewardstableid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  armorrewardstableid_.Swap(&other->armorrewardstableid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  moverewardstableid_.Swap(&other->moverewardstableid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthoredSweetenerRewardChoice, moverollcount_)
      + sizeof(AuthoredSweetenerRewardChoice::moverollcount_)
      - PROTOBUF_FIELD_OFFSET(AuthoredSweetenerRewardChoice, baserollcount_)>(
          reinterpret_cast<char*>(&baserollcount_),
          reinterpret_cast<char*>(&other->baserollcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthoredSweetenerRewardChoice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsweetener_5fblueprint_2eproto_getter, &descriptor_table_proto_2fsweetener_5fblueprint_2eproto_once,
      file_level_metadata_proto_2fsweetener_5fblueprint_2eproto[1]);
}

// ===================================================================

class SweetenerBlueprint::_Internal {
 public:
  using HasBits = decltype(std::declval<SweetenerBlueprint>()._has_bits_);
  static void set_has_authoredid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cookcost(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_requiredsweetness(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SweetenerBlueprint::SweetenerBlueprint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewardchoices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.SweetenerBlueprint)
}
SweetenerBlueprint::SweetenerBlueprint(const SweetenerBlueprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rewardchoices_(from.rewardchoices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authoredid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_authoredid()) {
    authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authoredid(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&requiredsweetness_) -
    reinterpret_cast<char*>(&price_)) + sizeof(requiredsweetness_));
  // @@protoc_insertion_point(copy_constructor:pxd.proto.SweetenerBlueprint)
}

void SweetenerBlueprint::SharedCtor() {
authoredid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requiredsweetness_) -
    reinterpret_cast<char*>(&price_)) + sizeof(requiredsweetness_));
}

SweetenerBlueprint::~SweetenerBlueprint() {
  // @@protoc_insertion_point(destructor:pxd.proto.SweetenerBlueprint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SweetenerBlueprint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  authoredid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SweetenerBlueprint::ArenaDtor(void* object) {
  SweetenerBlueprint* _this = reinterpret_cast< SweetenerBlueprint* >(object);
  (void)_this;
}
void SweetenerBlueprint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SweetenerBlueprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SweetenerBlueprint::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.SweetenerBlueprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewardchoices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      authoredid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requiredsweetness_) -
        reinterpret_cast<char*>(&price_)) + sizeof(requiredsweetness_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SweetenerBlueprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string AuthoredId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_authoredid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.SweetenerBlueprint.AuthoredId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.SweetenerBlueprint.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string Description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.SweetenerBlueprint.Description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 CookCost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cookcost(&has_bits);
          cookcost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 RequiredSweetness = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_requiredsweetness(&has_bits);
          requiredsweetness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pxd.proto.AuthoredSweetenerRewardChoice RewardChoices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewardchoices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SweetenerBlueprint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.SweetenerBlueprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string AuthoredId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authoredid().data(), static_cast<int>(this->_internal_authoredid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.SweetenerBlueprint.AuthoredId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authoredid(), target);
  }

  // optional string Name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.SweetenerBlueprint.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string Description = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.SweetenerBlueprint.Description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional uint32 Price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_price(), target);
  }

  // optional uint32 Duration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_duration(), target);
  }

  // optional uint32 CookCost = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cookcost(), target);
  }

  // optional uint32 RequiredSweetness = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_requiredsweetness(), target);
  }

  // repeated .pxd.proto.AuthoredSweetenerRewardChoice RewardChoices = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewardchoices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_rewardchoices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.SweetenerBlueprint)
  return target;
}

size_t SweetenerBlueprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.SweetenerBlueprint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pxd.proto.AuthoredSweetenerRewardChoice RewardChoices = 8;
  total_size += 1UL * this->_internal_rewardchoices_size();
  for (const auto& msg : this->rewardchoices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string AuthoredId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authoredid());
    }

    // optional string Name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string Description = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 Price = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

    // optional uint32 Duration = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 CookCost = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cookcost());
    }

    // optional uint32 RequiredSweetness = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_requiredsweetness());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SweetenerBlueprint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.SweetenerBlueprint)
  GOOGLE_DCHECK_NE(&from, this);
  const SweetenerBlueprint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SweetenerBlueprint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.SweetenerBlueprint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.SweetenerBlueprint)
    MergeFrom(*source);
  }
}

void SweetenerBlueprint::MergeFrom(const SweetenerBlueprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.SweetenerBlueprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewardchoices_.MergeFrom(from.rewardchoices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_authoredid(from._internal_authoredid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      cookcost_ = from.cookcost_;
    }
    if (cached_has_bits & 0x00000040u) {
      requiredsweetness_ = from.requiredsweetness_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SweetenerBlueprint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.SweetenerBlueprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SweetenerBlueprint::CopyFrom(const SweetenerBlueprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.SweetenerBlueprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweetenerBlueprint::IsInitialized() const {
  return true;
}

void SweetenerBlueprint::InternalSwap(SweetenerBlueprint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rewardchoices_.InternalSwap(&other->rewardchoices_);
  authoredid_.Swap(&other->authoredid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SweetenerBlueprint, requiredsweetness_)
      + sizeof(SweetenerBlueprint::requiredsweetness_)
      - PROTOBUF_FIELD_OFFSET(SweetenerBlueprint, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SweetenerBlueprint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fsweetener_5fblueprint_2eproto_getter, &descriptor_table_proto_2fsweetener_5fblueprint_2eproto_once,
      file_level_metadata_proto_2fsweetener_5fblueprint_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse* Arena::CreateMaybeMessage< ::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pxd::proto::AuthoredSweetenerRewardChoice* Arena::CreateMaybeMessage< ::pxd::proto::AuthoredSweetenerRewardChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::AuthoredSweetenerRewardChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::pxd::proto::SweetenerBlueprint* Arena::CreateMaybeMessage< ::pxd::proto::SweetenerBlueprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::SweetenerBlueprint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
