// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/tournament_blueprint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftournament_5fblueprint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftournament_5fblueprint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftournament_5fblueprint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftournament_5fblueprint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftournament_5fblueprint_2eproto;
namespace pxd {
namespace proto {
class TournamentBlueprint;
struct TournamentBlueprintDefaultTypeInternal;
extern TournamentBlueprintDefaultTypeInternal _TournamentBlueprint_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::TournamentBlueprint* Arena::CreateMaybeMessage<::pxd::proto::TournamentBlueprint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class TournamentBlueprint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.TournamentBlueprint) */ {
 public:
  inline TournamentBlueprint() : TournamentBlueprint(nullptr) {}
  ~TournamentBlueprint() override;
  explicit constexpr TournamentBlueprint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentBlueprint(const TournamentBlueprint& from);
  TournamentBlueprint(TournamentBlueprint&& from) noexcept
    : TournamentBlueprint() {
    *this = ::std::move(from);
  }

  inline TournamentBlueprint& operator=(const TournamentBlueprint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentBlueprint& operator=(TournamentBlueprint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentBlueprint& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentBlueprint* internal_default_instance() {
    return reinterpret_cast<const TournamentBlueprint*>(
               &_TournamentBlueprint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TournamentBlueprint& a, TournamentBlueprint& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentBlueprint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentBlueprint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TournamentBlueprint* New() const final {
    return CreateMaybeMessage<TournamentBlueprint>(nullptr);
  }

  TournamentBlueprint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TournamentBlueprint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TournamentBlueprint& from);
  void MergeFrom(const TournamentBlueprint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentBlueprint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.TournamentBlueprint";
  }
  protected:
  explicit TournamentBlueprint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthoredIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kBaseRewardsTableIdFieldNumber = 9,
    kWinnerRewardsTableIdFieldNumber = 11,
    kDurationFieldNumber = 3,
    kTeamCountFieldNumber = 4,
    kTeamSizeFieldNumber = 5,
    kMinSweetnessFieldNumber = 6,
    kMaxSweetnessFieldNumber = 7,
    kMaxRewardQualityFieldNumber = 8,
    kBaseRollCountFieldNumber = 10,
    kWinnerRollCountFieldNumber = 12,
    kJoinCostFieldNumber = 13,
  };
  // optional string AuthoredId = 1;
  bool has_authoredid() const;
  private:
  bool _internal_has_authoredid() const;
  public:
  void clear_authoredid();
  const std::string& authoredid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authoredid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authoredid();
  std::string* release_authoredid();
  void set_allocated_authoredid(std::string* authoredid);
  private:
  const std::string& _internal_authoredid() const;
  void _internal_set_authoredid(const std::string& value);
  std::string* _internal_mutable_authoredid();
  public:

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string BaseRewardsTableId = 9;
  bool has_baserewardstableid() const;
  private:
  bool _internal_has_baserewardstableid() const;
  public:
  void clear_baserewardstableid();
  const std::string& baserewardstableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_baserewardstableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_baserewardstableid();
  std::string* release_baserewardstableid();
  void set_allocated_baserewardstableid(std::string* baserewardstableid);
  private:
  const std::string& _internal_baserewardstableid() const;
  void _internal_set_baserewardstableid(const std::string& value);
  std::string* _internal_mutable_baserewardstableid();
  public:

  // optional string WinnerRewardsTableId = 11;
  bool has_winnerrewardstableid() const;
  private:
  bool _internal_has_winnerrewardstableid() const;
  public:
  void clear_winnerrewardstableid();
  const std::string& winnerrewardstableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_winnerrewardstableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_winnerrewardstableid();
  std::string* release_winnerrewardstableid();
  void set_allocated_winnerrewardstableid(std::string* winnerrewardstableid);
  private:
  const std::string& _internal_winnerrewardstableid() const;
  void _internal_set_winnerrewardstableid(const std::string& value);
  std::string* _internal_mutable_winnerrewardstableid();
  public:

  // optional uint32 Duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 TeamCount = 4;
  bool has_teamcount() const;
  private:
  bool _internal_has_teamcount() const;
  public:
  void clear_teamcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamcount() const;
  void set_teamcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamcount() const;
  void _internal_set_teamcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 TeamSize = 5;
  bool has_teamsize() const;
  private:
  bool _internal_has_teamsize() const;
  public:
  void clear_teamsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamsize() const;
  void set_teamsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamsize() const;
  void _internal_set_teamsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MinSweetness = 6;
  bool has_minsweetness() const;
  private:
  bool _internal_has_minsweetness() const;
  public:
  void clear_minsweetness();
  ::PROTOBUF_NAMESPACE_ID::uint32 minsweetness() const;
  void set_minsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minsweetness() const;
  void _internal_set_minsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MaxSweetness = 7;
  bool has_maxsweetness() const;
  private:
  bool _internal_has_maxsweetness() const;
  public:
  void clear_maxsweetness();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxsweetness() const;
  void set_maxsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxsweetness() const;
  void _internal_set_maxsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MaxRewardQuality = 8;
  bool has_maxrewardquality() const;
  private:
  bool _internal_has_maxrewardquality() const;
  public:
  void clear_maxrewardquality();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrewardquality() const;
  void set_maxrewardquality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxrewardquality() const;
  void _internal_set_maxrewardquality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 BaseRollCount = 10;
  bool has_baserollcount() const;
  private:
  bool _internal_has_baserollcount() const;
  public:
  void clear_baserollcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 baserollcount() const;
  void set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baserollcount() const;
  void _internal_set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 WinnerRollCount = 12;
  bool has_winnerrollcount() const;
  private:
  bool _internal_has_winnerrollcount() const;
  public:
  void clear_winnerrollcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 winnerrollcount() const;
  void set_winnerrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winnerrollcount() const;
  void _internal_set_winnerrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 JoinCost = 13;
  bool has_joincost() const;
  private:
  bool _internal_has_joincost() const;
  public:
  void clear_joincost();
  ::PROTOBUF_NAMESPACE_ID::uint32 joincost() const;
  void set_joincost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_joincost() const;
  void _internal_set_joincost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.TournamentBlueprint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authoredid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baserewardstableid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr winnerrewardstableid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minsweetness_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxsweetness_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrewardquality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baserollcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winnerrollcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 joincost_;
  friend struct ::TableStruct_proto_2ftournament_5fblueprint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TournamentBlueprint

// optional string AuthoredId = 1;
inline bool TournamentBlueprint::_internal_has_authoredid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_authoredid() const {
  return _internal_has_authoredid();
}
inline void TournamentBlueprint::clear_authoredid() {
  authoredid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TournamentBlueprint::authoredid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.AuthoredId)
  return _internal_authoredid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TournamentBlueprint::set_authoredid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.AuthoredId)
}
inline std::string* TournamentBlueprint::mutable_authoredid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.TournamentBlueprint.AuthoredId)
  return _internal_mutable_authoredid();
}
inline const std::string& TournamentBlueprint::_internal_authoredid() const {
  return authoredid_.Get();
}
inline void TournamentBlueprint::_internal_set_authoredid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TournamentBlueprint::_internal_mutable_authoredid() {
  _has_bits_[0] |= 0x00000001u;
  return authoredid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TournamentBlueprint::release_authoredid() {
  // @@protoc_insertion_point(field_release:pxd.proto.TournamentBlueprint.AuthoredId)
  if (!_internal_has_authoredid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return authoredid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TournamentBlueprint::set_allocated_authoredid(std::string* authoredid) {
  if (authoredid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  authoredid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authoredid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.TournamentBlueprint.AuthoredId)
}

// optional string Name = 2;
inline bool TournamentBlueprint::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_name() const {
  return _internal_has_name();
}
inline void TournamentBlueprint::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TournamentBlueprint::name() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TournamentBlueprint::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.Name)
}
inline std::string* TournamentBlueprint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.TournamentBlueprint.Name)
  return _internal_mutable_name();
}
inline const std::string& TournamentBlueprint::_internal_name() const {
  return name_.Get();
}
inline void TournamentBlueprint::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TournamentBlueprint::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TournamentBlueprint::release_name() {
  // @@protoc_insertion_point(field_release:pxd.proto.TournamentBlueprint.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TournamentBlueprint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.TournamentBlueprint.Name)
}

// optional uint32 Duration = 3;
inline bool TournamentBlueprint::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_duration() const {
  return _internal_has_duration();
}
inline void TournamentBlueprint::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::duration() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.Duration)
  return _internal_duration();
}
inline void TournamentBlueprint::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  duration_ = value;
}
inline void TournamentBlueprint::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.Duration)
}

// optional uint32 TeamCount = 4;
inline bool TournamentBlueprint::_internal_has_teamcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_teamcount() const {
  return _internal_has_teamcount();
}
inline void TournamentBlueprint::clear_teamcount() {
  teamcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_teamcount() const {
  return teamcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::teamcount() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.TeamCount)
  return _internal_teamcount();
}
inline void TournamentBlueprint::_internal_set_teamcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  teamcount_ = value;
}
inline void TournamentBlueprint::set_teamcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamcount(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.TeamCount)
}

// optional uint32 TeamSize = 5;
inline bool TournamentBlueprint::_internal_has_teamsize() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_teamsize() const {
  return _internal_has_teamsize();
}
inline void TournamentBlueprint::clear_teamsize() {
  teamsize_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_teamsize() const {
  return teamsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::teamsize() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.TeamSize)
  return _internal_teamsize();
}
inline void TournamentBlueprint::_internal_set_teamsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  teamsize_ = value;
}
inline void TournamentBlueprint::set_teamsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamsize(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.TeamSize)
}

// optional uint32 MinSweetness = 6;
inline bool TournamentBlueprint::_internal_has_minsweetness() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_minsweetness() const {
  return _internal_has_minsweetness();
}
inline void TournamentBlueprint::clear_minsweetness() {
  minsweetness_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_minsweetness() const {
  return minsweetness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::minsweetness() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.MinSweetness)
  return _internal_minsweetness();
}
inline void TournamentBlueprint::_internal_set_minsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  minsweetness_ = value;
}
inline void TournamentBlueprint::set_minsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minsweetness(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.MinSweetness)
}

// optional uint32 MaxSweetness = 7;
inline bool TournamentBlueprint::_internal_has_maxsweetness() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_maxsweetness() const {
  return _internal_has_maxsweetness();
}
inline void TournamentBlueprint::clear_maxsweetness() {
  maxsweetness_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_maxsweetness() const {
  return maxsweetness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::maxsweetness() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.MaxSweetness)
  return _internal_maxsweetness();
}
inline void TournamentBlueprint::_internal_set_maxsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  maxsweetness_ = value;
}
inline void TournamentBlueprint::set_maxsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxsweetness(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.MaxSweetness)
}

// optional uint32 MaxRewardQuality = 8;
inline bool TournamentBlueprint::_internal_has_maxrewardquality() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_maxrewardquality() const {
  return _internal_has_maxrewardquality();
}
inline void TournamentBlueprint::clear_maxrewardquality() {
  maxrewardquality_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_maxrewardquality() const {
  return maxrewardquality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::maxrewardquality() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.MaxRewardQuality)
  return _internal_maxrewardquality();
}
inline void TournamentBlueprint::_internal_set_maxrewardquality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  maxrewardquality_ = value;
}
inline void TournamentBlueprint::set_maxrewardquality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxrewardquality(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.MaxRewardQuality)
}

// optional string BaseRewardsTableId = 9;
inline bool TournamentBlueprint::_internal_has_baserewardstableid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_baserewardstableid() const {
  return _internal_has_baserewardstableid();
}
inline void TournamentBlueprint::clear_baserewardstableid() {
  baserewardstableid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TournamentBlueprint::baserewardstableid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.BaseRewardsTableId)
  return _internal_baserewardstableid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TournamentBlueprint::set_baserewardstableid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 baserewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.BaseRewardsTableId)
}
inline std::string* TournamentBlueprint::mutable_baserewardstableid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.TournamentBlueprint.BaseRewardsTableId)
  return _internal_mutable_baserewardstableid();
}
inline const std::string& TournamentBlueprint::_internal_baserewardstableid() const {
  return baserewardstableid_.Get();
}
inline void TournamentBlueprint::_internal_set_baserewardstableid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  baserewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TournamentBlueprint::_internal_mutable_baserewardstableid() {
  _has_bits_[0] |= 0x00000004u;
  return baserewardstableid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TournamentBlueprint::release_baserewardstableid() {
  // @@protoc_insertion_point(field_release:pxd.proto.TournamentBlueprint.BaseRewardsTableId)
  if (!_internal_has_baserewardstableid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return baserewardstableid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TournamentBlueprint::set_allocated_baserewardstableid(std::string* baserewardstableid) {
  if (baserewardstableid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  baserewardstableid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baserewardstableid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.TournamentBlueprint.BaseRewardsTableId)
}

// optional uint32 BaseRollCount = 10;
inline bool TournamentBlueprint::_internal_has_baserollcount() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_baserollcount() const {
  return _internal_has_baserollcount();
}
inline void TournamentBlueprint::clear_baserollcount() {
  baserollcount_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_baserollcount() const {
  return baserollcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::baserollcount() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.BaseRollCount)
  return _internal_baserollcount();
}
inline void TournamentBlueprint::_internal_set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  baserollcount_ = value;
}
inline void TournamentBlueprint::set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baserollcount(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.BaseRollCount)
}

// optional string WinnerRewardsTableId = 11;
inline bool TournamentBlueprint::_internal_has_winnerrewardstableid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_winnerrewardstableid() const {
  return _internal_has_winnerrewardstableid();
}
inline void TournamentBlueprint::clear_winnerrewardstableid() {
  winnerrewardstableid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TournamentBlueprint::winnerrewardstableid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.WinnerRewardsTableId)
  return _internal_winnerrewardstableid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TournamentBlueprint::set_winnerrewardstableid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 winnerrewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.WinnerRewardsTableId)
}
inline std::string* TournamentBlueprint::mutable_winnerrewardstableid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.TournamentBlueprint.WinnerRewardsTableId)
  return _internal_mutable_winnerrewardstableid();
}
inline const std::string& TournamentBlueprint::_internal_winnerrewardstableid() const {
  return winnerrewardstableid_.Get();
}
inline void TournamentBlueprint::_internal_set_winnerrewardstableid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  winnerrewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TournamentBlueprint::_internal_mutable_winnerrewardstableid() {
  _has_bits_[0] |= 0x00000008u;
  return winnerrewardstableid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TournamentBlueprint::release_winnerrewardstableid() {
  // @@protoc_insertion_point(field_release:pxd.proto.TournamentBlueprint.WinnerRewardsTableId)
  if (!_internal_has_winnerrewardstableid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return winnerrewardstableid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TournamentBlueprint::set_allocated_winnerrewardstableid(std::string* winnerrewardstableid) {
  if (winnerrewardstableid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  winnerrewardstableid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), winnerrewardstableid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.TournamentBlueprint.WinnerRewardsTableId)
}

// optional uint32 WinnerRollCount = 12;
inline bool TournamentBlueprint::_internal_has_winnerrollcount() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_winnerrollcount() const {
  return _internal_has_winnerrollcount();
}
inline void TournamentBlueprint::clear_winnerrollcount() {
  winnerrollcount_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_winnerrollcount() const {
  return winnerrollcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::winnerrollcount() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.WinnerRollCount)
  return _internal_winnerrollcount();
}
inline void TournamentBlueprint::_internal_set_winnerrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  winnerrollcount_ = value;
}
inline void TournamentBlueprint::set_winnerrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winnerrollcount(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.WinnerRollCount)
}

// optional uint32 JoinCost = 13;
inline bool TournamentBlueprint::_internal_has_joincost() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TournamentBlueprint::has_joincost() const {
  return _internal_has_joincost();
}
inline void TournamentBlueprint::clear_joincost() {
  joincost_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::_internal_joincost() const {
  return joincost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentBlueprint::joincost() const {
  // @@protoc_insertion_point(field_get:pxd.proto.TournamentBlueprint.JoinCost)
  return _internal_joincost();
}
inline void TournamentBlueprint::_internal_set_joincost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  joincost_ = value;
}
inline void TournamentBlueprint::set_joincost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_joincost(value);
  // @@protoc_insertion_point(field_set:pxd.proto.TournamentBlueprint.JoinCost)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftournament_5fblueprint_2eproto
