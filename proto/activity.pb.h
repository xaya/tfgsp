// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/activity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2factivity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2factivity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2factivity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2factivity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2factivity_2eproto;
namespace pxd {
namespace proto {
class Activity;
struct ActivityDefaultTypeInternal;
extern ActivityDefaultTypeInternal _Activity_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::Activity* Arena::CreateMaybeMessage<::pxd::proto::Activity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class Activity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.Activity) */ {
 public:
  inline Activity() : Activity(nullptr) {}
  ~Activity() override;
  explicit constexpr Activity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Activity(const Activity& from);
  Activity(Activity&& from) noexcept
    : Activity() {
    *this = ::std::move(from);
  }

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Activity& operator=(Activity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Activity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Activity* internal_default_instance() {
    return reinterpret_cast<const Activity*>(
               &_Activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Activity& a, Activity& b) {
    a.Swap(&b);
  }
  inline void Swap(Activity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Activity* New() const final {
    return CreateMaybeMessage<Activity>(nullptr);
  }

  Activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.Activity";
  }
  protected:
  explicit Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kOwnerFieldNumber = 5,
    kRelatedItemGUIDFieldNumber = 6,
    kStartBlockFieldNumber = 2,
    kStateFieldNumber = 1,
    kDurationFieldNumber = 3,
    kRelatedItemOrClassIDFieldNumber = 7,
  };
  // optional string Name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Owner = 5;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // optional string RelatedItemGUID = 6;
  bool has_relateditemguid() const;
  private:
  bool _internal_has_relateditemguid() const;
  public:
  void clear_relateditemguid();
  const std::string& relateditemguid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relateditemguid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relateditemguid();
  std::string* release_relateditemguid();
  void set_allocated_relateditemguid(std::string* relateditemguid);
  private:
  const std::string& _internal_relateditemguid() const;
  void _internal_set_relateditemguid(const std::string& value);
  std::string* _internal_mutable_relateditemguid();
  public:

  // optional uint64 StartBlock = 2;
  bool has_startblock() const;
  private:
  bool _internal_has_startblock() const;
  public:
  void clear_startblock();
  ::PROTOBUF_NAMESPACE_ID::uint64 startblock() const;
  void set_startblock(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_startblock() const;
  void _internal_set_startblock(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 State = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 RelatedItemOrClassID = 7;
  bool has_relateditemorclassid() const;
  private:
  bool _internal_has_relateditemorclassid() const;
  public:
  void clear_relateditemorclassid();
  ::PROTOBUF_NAMESPACE_ID::uint64 relateditemorclassid() const;
  void set_relateditemorclassid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_relateditemorclassid() const;
  void _internal_set_relateditemorclassid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.Activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relateditemguid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 startblock_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 relateditemorclassid_;
  friend struct ::TableStruct_proto_2factivity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Activity

// optional uint32 State = 1;
inline bool Activity::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Activity::has_state() const {
  return _internal_has_state();
}
inline void Activity::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activity::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activity::state() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Activity.State)
  return _internal_state();
}
inline void Activity::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  state_ = value;
}
inline void Activity::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Activity.State)
}

// optional uint64 StartBlock = 2;
inline bool Activity::_internal_has_startblock() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Activity::has_startblock() const {
  return _internal_has_startblock();
}
inline void Activity::clear_startblock() {
  startblock_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Activity::_internal_startblock() const {
  return startblock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Activity::startblock() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Activity.StartBlock)
  return _internal_startblock();
}
inline void Activity::_internal_set_startblock(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  startblock_ = value;
}
inline void Activity::set_startblock(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_startblock(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Activity.StartBlock)
}

// optional uint32 Duration = 3;
inline bool Activity::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Activity::has_duration() const {
  return _internal_has_duration();
}
inline void Activity::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activity::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activity::duration() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Activity.Duration)
  return _internal_duration();
}
inline void Activity::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  duration_ = value;
}
inline void Activity::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Activity.Duration)
}

// optional string Name = 4;
inline bool Activity::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Activity::has_name() const {
  return _internal_has_name();
}
inline void Activity::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Activity::name() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Activity.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Activity::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Activity.Name)
}
inline std::string* Activity::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Activity.Name)
  return _internal_mutable_name();
}
inline const std::string& Activity::_internal_name() const {
  return name_.Get();
}
inline void Activity::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Activity::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Activity::release_name() {
  // @@protoc_insertion_point(field_release:pxd.proto.Activity.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Activity.Name)
}

// optional string Owner = 5;
inline bool Activity::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Activity::has_owner() const {
  return _internal_has_owner();
}
inline void Activity::clear_owner() {
  owner_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Activity::owner() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Activity.Owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Activity::set_owner(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Activity.Owner)
}
inline std::string* Activity::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Activity.Owner)
  return _internal_mutable_owner();
}
inline const std::string& Activity::_internal_owner() const {
  return owner_.Get();
}
inline void Activity::_internal_set_owner(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Activity::_internal_mutable_owner() {
  _has_bits_[0] |= 0x00000002u;
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Activity::release_owner() {
  // @@protoc_insertion_point(field_release:pxd.proto.Activity.Owner)
  if (!_internal_has_owner()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return owner_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activity::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Activity.Owner)
}

// optional string RelatedItemGUID = 6;
inline bool Activity::_internal_has_relateditemguid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Activity::has_relateditemguid() const {
  return _internal_has_relateditemguid();
}
inline void Activity::clear_relateditemguid() {
  relateditemguid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Activity::relateditemguid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Activity.RelatedItemGUID)
  return _internal_relateditemguid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Activity::set_relateditemguid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 relateditemguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Activity.RelatedItemGUID)
}
inline std::string* Activity::mutable_relateditemguid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Activity.RelatedItemGUID)
  return _internal_mutable_relateditemguid();
}
inline const std::string& Activity::_internal_relateditemguid() const {
  return relateditemguid_.Get();
}
inline void Activity::_internal_set_relateditemguid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  relateditemguid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Activity::_internal_mutable_relateditemguid() {
  _has_bits_[0] |= 0x00000004u;
  return relateditemguid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Activity::release_relateditemguid() {
  // @@protoc_insertion_point(field_release:pxd.proto.Activity.RelatedItemGUID)
  if (!_internal_has_relateditemguid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return relateditemguid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activity::set_allocated_relateditemguid(std::string* relateditemguid) {
  if (relateditemguid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  relateditemguid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relateditemguid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Activity.RelatedItemGUID)
}

// optional uint64 RelatedItemOrClassID = 7;
inline bool Activity::_internal_has_relateditemorclassid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Activity::has_relateditemorclassid() const {
  return _internal_has_relateditemorclassid();
}
inline void Activity::clear_relateditemorclassid() {
  relateditemorclassid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Activity::_internal_relateditemorclassid() const {
  return relateditemorclassid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Activity::relateditemorclassid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Activity.RelatedItemOrClassID)
  return _internal_relateditemorclassid();
}
inline void Activity::_internal_set_relateditemorclassid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  relateditemorclassid_ = value;
}
inline void Activity::set_relateditemorclassid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_relateditemorclassid(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Activity.RelatedItemOrClassID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2factivity_2eproto
