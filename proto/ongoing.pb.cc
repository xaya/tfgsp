// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ongoing.proto

#include "proto/ongoing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pxd {
namespace proto {
constexpr OngoinOperation::OngoinOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemauthid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blocksleft_(0u)
  , type_(0u){}
struct OngoinOperationDefaultTypeInternal {
  constexpr OngoinOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OngoinOperationDefaultTypeInternal() {}
  union {
    OngoinOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OngoinOperationDefaultTypeInternal _OngoinOperation_default_instance_;
}  // namespace proto
}  // namespace pxd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fongoing_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fongoing_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fongoing_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fongoing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pxd::proto::OngoinOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::OngoinOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::OngoinOperation, blocksleft_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::OngoinOperation, type_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::OngoinOperation, itemauthid_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::pxd::proto::OngoinOperation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_OngoinOperation_default_instance_),
};

const char descriptor_table_protodef_proto_2fongoing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto/ongoing.proto\022\tpxd.proto\"G\n\017Ongo"
  "inOperation\022\022\n\nBlocksLeft\030\001 \001(\r\022\014\n\004Type\030"
  "\002 \001(\r\022\022\n\nItemAuthID\030\003 \001(\tB\003\370\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fongoing_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fongoing_2eproto = {
  false, false, 110, descriptor_table_protodef_proto_2fongoing_2eproto, "proto/ongoing.proto", 
  &descriptor_table_proto_2fongoing_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_proto_2fongoing_2eproto::offsets,
  file_level_metadata_proto_2fongoing_2eproto, file_level_enum_descriptors_proto_2fongoing_2eproto, file_level_service_descriptors_proto_2fongoing_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fongoing_2eproto_getter() {
  return &descriptor_table_proto_2fongoing_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fongoing_2eproto(&descriptor_table_proto_2fongoing_2eproto);
namespace pxd {
namespace proto {

// ===================================================================

class OngoinOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<OngoinOperation>()._has_bits_);
  static void set_has_blocksleft(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemauthid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OngoinOperation::OngoinOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.OngoinOperation)
}
OngoinOperation::OngoinOperation(const OngoinOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  itemauthid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_itemauthid()) {
    itemauthid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_itemauthid(), 
      GetArena());
  }
  ::memcpy(&blocksleft_, &from.blocksleft_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&blocksleft_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pxd.proto.OngoinOperation)
}

void OngoinOperation::SharedCtor() {
itemauthid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blocksleft_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&blocksleft_)) + sizeof(type_));
}

OngoinOperation::~OngoinOperation() {
  // @@protoc_insertion_point(destructor:pxd.proto.OngoinOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OngoinOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  itemauthid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OngoinOperation::ArenaDtor(void* object) {
  OngoinOperation* _this = reinterpret_cast< OngoinOperation* >(object);
  (void)_this;
}
void OngoinOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OngoinOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OngoinOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.OngoinOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    itemauthid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&blocksleft_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&blocksleft_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OngoinOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 BlocksLeft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blocksleft(&has_bits);
          blocksleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ItemAuthID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_itemauthid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.OngoinOperation.ItemAuthID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OngoinOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.OngoinOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 BlocksLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blocksleft(), target);
  }

  // optional uint32 Type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional string ItemAuthID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_itemauthid().data(), static_cast<int>(this->_internal_itemauthid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.OngoinOperation.ItemAuthID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_itemauthid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.OngoinOperation)
  return target;
}

size_t OngoinOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.OngoinOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ItemAuthID = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_itemauthid());
    }

    // optional uint32 BlocksLeft = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blocksleft());
    }

    // optional uint32 Type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OngoinOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.OngoinOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const OngoinOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OngoinOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.OngoinOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.OngoinOperation)
    MergeFrom(*source);
  }
}

void OngoinOperation::MergeFrom(const OngoinOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.OngoinOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_itemauthid(from._internal_itemauthid());
    }
    if (cached_has_bits & 0x00000002u) {
      blocksleft_ = from.blocksleft_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OngoinOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.OngoinOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OngoinOperation::CopyFrom(const OngoinOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.OngoinOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OngoinOperation::IsInitialized() const {
  return true;
}

void OngoinOperation::InternalSwap(OngoinOperation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemauthid_.Swap(&other->itemauthid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OngoinOperation, type_)
      + sizeof(OngoinOperation::type_)
      - PROTOBUF_FIELD_OFFSET(OngoinOperation, blocksleft_)>(
          reinterpret_cast<char*>(&blocksleft_),
          reinterpret_cast<char*>(&other->blocksleft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OngoinOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fongoing_2eproto_getter, &descriptor_table_proto_2fongoing_2eproto_once,
      file_level_metadata_proto_2fongoing_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pxd::proto::OngoinOperation* Arena::CreateMaybeMessage< ::pxd::proto::OngoinOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::OngoinOperation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
