// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/crafted_recipe.proto

#include "proto/crafted_recipe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pxd {
namespace proto {
constexpr AuthoredArmor::AuthoredArmor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , armortype_(0u){}
struct AuthoredArmorDefaultTypeInternal {
  constexpr AuthoredArmorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthoredArmorDefaultTypeInternal() {}
  union {
    AuthoredArmor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthoredArmorDefaultTypeInternal _AuthoredArmor_default_instance_;
constexpr CandyAmount::CandyAmount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candytype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(PROTOBUF_ULONGLONG(0)){}
struct CandyAmountDefaultTypeInternal {
  constexpr CandyAmountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandyAmountDefaultTypeInternal() {}
  union {
    CandyAmount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandyAmountDefaultTypeInternal _CandyAmount_default_instance_;
constexpr CraftedRecipe::CraftedRecipe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : armor_()
  , moves_()
  , requiredcandy_()
  , authoredid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , animationid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fightername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fightertype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_(0u)
  , quality_(0u)
  , isaccountbound_(false)
  , requiredfighterquality_(0u){}
struct CraftedRecipeDefaultTypeInternal {
  constexpr CraftedRecipeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CraftedRecipeDefaultTypeInternal() {}
  union {
    CraftedRecipe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CraftedRecipeDefaultTypeInternal _CraftedRecipe_default_instance_;
}  // namespace proto
}  // namespace pxd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fcrafted_5frecipe_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fcrafted_5frecipe_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fcrafted_5frecipe_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fcrafted_5frecipe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredArmor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredArmor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredArmor, candytype_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::AuthoredArmor, armortype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CandyAmount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CandyAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CandyAmount, candytype_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CandyAmount, amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, authoredid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, animationid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, armor_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, name_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, duration_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, fightername_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, fightertype_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, moves_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, quality_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, isaccountbound_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, requiredcandy_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::CraftedRecipe, requiredfighterquality_),
  0,
  1,
  ~0u,
  2,
  5,
  3,
  4,
  ~0u,
  6,
  7,
  ~0u,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pxd::proto::AuthoredArmor)},
  { 9, 16, sizeof(::pxd::proto::CandyAmount)},
  { 18, 35, sizeof(::pxd::proto::CraftedRecipe)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_AuthoredArmor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_CandyAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_CraftedRecipe_default_instance_),
};

const char descriptor_table_protodef_proto_2fcrafted_5frecipe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032proto/crafted_recipe.proto\022\tpxd.proto\""
  "5\n\rAuthoredArmor\022\021\n\tcandyType\030\001 \001(\t\022\021\n\ta"
  "rmorType\030\002 \001(\r\"0\n\013CandyAmount\022\021\n\tcandyTy"
  "pe\030\001 \001(\t\022\016\n\006amount\030\002 \001(\004\"\262\002\n\rCraftedReci"
  "pe\022\022\n\nAuthoredId\030\001 \001(\t\022\023\n\013AnimationId\030\002 "
  "\001(\t\022\'\n\005Armor\030\003 \003(\0132\030.pxd.proto.AuthoredA"
  "rmor\022\014\n\004Name\030\004 \001(\t\022\020\n\010Duration\030\005 \001(\r\022\023\n\013"
  "FighterName\030\006 \001(\t\022\023\n\013FighterType\030\007 \001(\t\022\r"
  "\n\005Moves\030\010 \003(\t\022\017\n\007Quality\030\t \001(\r\022\026\n\016IsAcco"
  "untBound\030\n \001(\010\022-\n\rRequiredCandy\030\013 \003(\0132\026."
  "pxd.proto.CandyAmount\022\036\n\026RequiredFighter"
  "Quality\030\014 \001(\rB\003\370\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fcrafted_5frecipe_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcrafted_5frecipe_2eproto = {
  false, false, 458, descriptor_table_protodef_proto_2fcrafted_5frecipe_2eproto, "proto/crafted_recipe.proto", 
  &descriptor_table_proto_2fcrafted_5frecipe_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_proto_2fcrafted_5frecipe_2eproto::offsets,
  file_level_metadata_proto_2fcrafted_5frecipe_2eproto, file_level_enum_descriptors_proto_2fcrafted_5frecipe_2eproto, file_level_service_descriptors_proto_2fcrafted_5frecipe_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fcrafted_5frecipe_2eproto_getter() {
  return &descriptor_table_proto_2fcrafted_5frecipe_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fcrafted_5frecipe_2eproto(&descriptor_table_proto_2fcrafted_5frecipe_2eproto);
namespace pxd {
namespace proto {

// ===================================================================

class AuthoredArmor::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthoredArmor>()._has_bits_);
  static void set_has_candytype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_armortype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AuthoredArmor::AuthoredArmor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.AuthoredArmor)
}
AuthoredArmor::AuthoredArmor(const AuthoredArmor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_candytype()) {
    candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candytype(), 
      GetArena());
  }
  armortype_ = from.armortype_;
  // @@protoc_insertion_point(copy_constructor:pxd.proto.AuthoredArmor)
}

void AuthoredArmor::SharedCtor() {
candytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
armortype_ = 0u;
}

AuthoredArmor::~AuthoredArmor() {
  // @@protoc_insertion_point(destructor:pxd.proto.AuthoredArmor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthoredArmor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthoredArmor::ArenaDtor(void* object) {
  AuthoredArmor* _this = reinterpret_cast< AuthoredArmor* >(object);
  (void)_this;
}
void AuthoredArmor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthoredArmor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthoredArmor::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.AuthoredArmor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    candytype_.ClearNonDefaultToEmpty();
  }
  armortype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthoredArmor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string candyType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_candytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.AuthoredArmor.candyType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 armorType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_armortype(&has_bits);
          armortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthoredArmor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.AuthoredArmor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string candyType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_candytype().data(), static_cast<int>(this->_internal_candytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.AuthoredArmor.candyType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candytype(), target);
  }

  // optional uint32 armorType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_armortype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.AuthoredArmor)
  return target;
}

size_t AuthoredArmor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.AuthoredArmor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string candyType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_candytype());
    }

    // optional uint32 armorType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_armortype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthoredArmor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.AuthoredArmor)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthoredArmor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthoredArmor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.AuthoredArmor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.AuthoredArmor)
    MergeFrom(*source);
  }
}

void AuthoredArmor::MergeFrom(const AuthoredArmor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.AuthoredArmor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_candytype(from._internal_candytype());
    }
    if (cached_has_bits & 0x00000002u) {
      armortype_ = from.armortype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthoredArmor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.AuthoredArmor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthoredArmor::CopyFrom(const AuthoredArmor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.AuthoredArmor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthoredArmor::IsInitialized() const {
  return true;
}

void AuthoredArmor::InternalSwap(AuthoredArmor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candytype_.Swap(&other->candytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(armortype_, other->armortype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthoredArmor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcrafted_5frecipe_2eproto_getter, &descriptor_table_proto_2fcrafted_5frecipe_2eproto_once,
      file_level_metadata_proto_2fcrafted_5frecipe_2eproto[0]);
}

// ===================================================================

class CandyAmount::_Internal {
 public:
  using HasBits = decltype(std::declval<CandyAmount>()._has_bits_);
  static void set_has_candytype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CandyAmount::CandyAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.CandyAmount)
}
CandyAmount::CandyAmount(const CandyAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_candytype()) {
    candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candytype(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:pxd.proto.CandyAmount)
}

void CandyAmount::SharedCtor() {
candytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = PROTOBUF_ULONGLONG(0);
}

CandyAmount::~CandyAmount() {
  // @@protoc_insertion_point(destructor:pxd.proto.CandyAmount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandyAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CandyAmount::ArenaDtor(void* object) {
  CandyAmount* _this = reinterpret_cast< CandyAmount* >(object);
  (void)_this;
}
void CandyAmount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandyAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandyAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.CandyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    candytype_.ClearNonDefaultToEmpty();
  }
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandyAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string candyType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_candytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.CandyAmount.candyType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandyAmount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.CandyAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string candyType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_candytype().data(), static_cast<int>(this->_internal_candytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.CandyAmount.candyType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candytype(), target);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.CandyAmount)
  return target;
}

size_t CandyAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.CandyAmount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string candyType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_candytype());
    }

    // optional uint64 amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandyAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.CandyAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const CandyAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandyAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.CandyAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.CandyAmount)
    MergeFrom(*source);
  }
}

void CandyAmount::MergeFrom(const CandyAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.CandyAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_candytype(from._internal_candytype());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CandyAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.CandyAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandyAmount::CopyFrom(const CandyAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.CandyAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandyAmount::IsInitialized() const {
  return true;
}

void CandyAmount::InternalSwap(CandyAmount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candytype_.Swap(&other->candytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandyAmount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcrafted_5frecipe_2eproto_getter, &descriptor_table_proto_2fcrafted_5frecipe_2eproto_once,
      file_level_metadata_proto_2fcrafted_5frecipe_2eproto[1]);
}

// ===================================================================

class CraftedRecipe::_Internal {
 public:
  using HasBits = decltype(std::declval<CraftedRecipe>()._has_bits_);
  static void set_has_authoredid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_animationid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fightername(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fightertype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isaccountbound(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_requiredfighterquality(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CraftedRecipe::CraftedRecipe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  armor_(arena),
  moves_(arena),
  requiredcandy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.CraftedRecipe)
}
CraftedRecipe::CraftedRecipe(const CraftedRecipe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      armor_(from.armor_),
      moves_(from.moves_),
      requiredcandy_(from.requiredcandy_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authoredid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_authoredid()) {
    authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authoredid(), 
      GetArena());
  }
  animationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_animationid()) {
    animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_animationid(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  fightername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fightername()) {
    fightername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fightername(), 
      GetArena());
  }
  fightertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fightertype()) {
    fightertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fightertype(), 
      GetArena());
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&requiredfighterquality_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(requiredfighterquality_));
  // @@protoc_insertion_point(copy_constructor:pxd.proto.CraftedRecipe)
}

void CraftedRecipe::SharedCtor() {
authoredid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
animationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fightername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fightertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requiredfighterquality_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(requiredfighterquality_));
}

CraftedRecipe::~CraftedRecipe() {
  // @@protoc_insertion_point(destructor:pxd.proto.CraftedRecipe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CraftedRecipe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  authoredid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fightername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fightertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CraftedRecipe::ArenaDtor(void* object) {
  CraftedRecipe* _this = reinterpret_cast< CraftedRecipe* >(object);
  (void)_this;
}
void CraftedRecipe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CraftedRecipe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CraftedRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.CraftedRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  armor_.Clear();
  moves_.Clear();
  requiredcandy_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      authoredid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      animationid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      fightername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      fightertype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isaccountbound_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(isaccountbound_));
  }
  requiredfighterquality_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraftedRecipe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string AuthoredId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_authoredid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.CraftedRecipe.AuthoredId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AnimationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_animationid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.CraftedRecipe.AnimationId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pxd.proto.AuthoredArmor Armor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_armor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.CraftedRecipe.Name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string FighterName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_fightername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.CraftedRecipe.FighterName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string FighterType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fightertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.CraftedRecipe.FighterType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Moves = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_moves();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.CraftedRecipe.Moves");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 Quality = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool IsAccountBound = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isaccountbound(&has_bits);
          isaccountbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pxd.proto.CandyAmount RequiredCandy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requiredcandy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 RequiredFighterQuality = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_requiredfighterquality(&has_bits);
          requiredfighterquality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CraftedRecipe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.CraftedRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string AuthoredId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authoredid().data(), static_cast<int>(this->_internal_authoredid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.CraftedRecipe.AuthoredId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authoredid(), target);
  }

  // optional string AnimationId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animationid().data(), static_cast<int>(this->_internal_animationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.CraftedRecipe.AnimationId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_animationid(), target);
  }

  // repeated .pxd.proto.AuthoredArmor Armor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_armor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_armor(i), target, stream);
  }

  // optional string Name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.CraftedRecipe.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional uint32 Duration = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_duration(), target);
  }

  // optional string FighterName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fightername().data(), static_cast<int>(this->_internal_fightername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.CraftedRecipe.FighterName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fightername(), target);
  }

  // optional string FighterType = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fightertype().data(), static_cast<int>(this->_internal_fightertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.CraftedRecipe.FighterType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fightertype(), target);
  }

  // repeated string Moves = 8;
  for (int i = 0, n = this->_internal_moves_size(); i < n; i++) {
    const auto& s = this->_internal_moves(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.CraftedRecipe.Moves");
    target = stream->WriteString(8, s, target);
  }

  // optional uint32 Quality = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_quality(), target);
  }

  // optional bool IsAccountBound = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isaccountbound(), target);
  }

  // repeated .pxd.proto.CandyAmount RequiredCandy = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requiredcandy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_requiredcandy(i), target, stream);
  }

  // optional uint32 RequiredFighterQuality = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_requiredfighterquality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.CraftedRecipe)
  return target;
}

size_t CraftedRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.CraftedRecipe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pxd.proto.AuthoredArmor Armor = 3;
  total_size += 1UL * this->_internal_armor_size();
  for (const auto& msg : this->armor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string Moves = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(moves_.size());
  for (int i = 0, n = moves_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      moves_.Get(i));
  }

  // repeated .pxd.proto.CandyAmount RequiredCandy = 11;
  total_size += 1UL * this->_internal_requiredcandy_size();
  for (const auto& msg : this->requiredcandy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string AuthoredId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authoredid());
    }

    // optional string AnimationId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animationid());
    }

    // optional string Name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string FighterName = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fightername());
    }

    // optional string FighterType = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fightertype());
    }

    // optional uint32 Duration = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 Quality = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional bool IsAccountBound = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 RequiredFighterQuality = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requiredfighterquality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CraftedRecipe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.CraftedRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  const CraftedRecipe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CraftedRecipe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.CraftedRecipe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.CraftedRecipe)
    MergeFrom(*source);
  }
}

void CraftedRecipe::MergeFrom(const CraftedRecipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.CraftedRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  armor_.MergeFrom(from.armor_);
  moves_.MergeFrom(from.moves_);
  requiredcandy_.MergeFrom(from.requiredcandy_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_authoredid(from._internal_authoredid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_animationid(from._internal_animationid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_fightername(from._internal_fightername());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_fightertype(from._internal_fightertype());
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000080u) {
      isaccountbound_ = from.isaccountbound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_requiredfighterquality(from._internal_requiredfighterquality());
  }
}

void CraftedRecipe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.CraftedRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CraftedRecipe::CopyFrom(const CraftedRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.CraftedRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraftedRecipe::IsInitialized() const {
  return true;
}

void CraftedRecipe::InternalSwap(CraftedRecipe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  armor_.InternalSwap(&other->armor_);
  moves_.InternalSwap(&other->moves_);
  requiredcandy_.InternalSwap(&other->requiredcandy_);
  authoredid_.Swap(&other->authoredid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  animationid_.Swap(&other->animationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fightername_.Swap(&other->fightername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fightertype_.Swap(&other->fightertype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CraftedRecipe, requiredfighterquality_)
      + sizeof(CraftedRecipe::requiredfighterquality_)
      - PROTOBUF_FIELD_OFFSET(CraftedRecipe, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CraftedRecipe::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcrafted_5frecipe_2eproto_getter, &descriptor_table_proto_2fcrafted_5frecipe_2eproto_once,
      file_level_metadata_proto_2fcrafted_5frecipe_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pxd::proto::AuthoredArmor* Arena::CreateMaybeMessage< ::pxd::proto::AuthoredArmor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::AuthoredArmor >(arena);
}
template<> PROTOBUF_NOINLINE ::pxd::proto::CandyAmount* Arena::CreateMaybeMessage< ::pxd::proto::CandyAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::CandyAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::pxd::proto::CraftedRecipe* Arena::CreateMaybeMessage< ::pxd::proto::CraftedRecipe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::CraftedRecipe >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
