// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/fighter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ffighter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ffighter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/fighter_move_blueprint.pb.h"
#include "proto/armor_piece.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ffighter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ffighter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ffighter_2eproto;
namespace pxd {
namespace proto {
class Fighter;
struct FighterDefaultTypeInternal;
extern FighterDefaultTypeInternal _Fighter_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::Fighter* Arena::CreateMaybeMessage<::pxd::proto::Fighter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class Fighter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.Fighter) */ {
 public:
  inline Fighter() : Fighter(nullptr) {}
  ~Fighter() override;
  explicit constexpr Fighter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fighter(const Fighter& from);
  Fighter(Fighter&& from) noexcept
    : Fighter() {
    *this = ::std::move(from);
  }

  inline Fighter& operator=(const Fighter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fighter& operator=(Fighter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fighter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fighter* internal_default_instance() {
    return reinterpret_cast<const Fighter*>(
               &_Fighter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fighter& a, Fighter& b) {
    a.Swap(&b);
  }
  inline void Swap(Fighter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fighter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fighter* New() const final {
    return CreateMaybeMessage<Fighter>(nullptr);
  }

  Fighter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fighter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fighter& from);
  void MergeFrom(const Fighter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fighter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.Fighter";
  }
  protected:
  explicit Fighter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovesFieldNumber = 8,
    kArmorPiecesFieldNumber = 9,
    kRecipeIdFieldNumber = 1,
    kFighterTypeIdFieldNumber = 3,
    kAnimationIDFieldNumber = 10,
    kTournamentInstanceIDFieldNumber = 2,
    kQualityFieldNumber = 4,
    kRatingFieldNumber = 5,
    kSweetnessFieldNumber = 6,
    kHighestAppliedSweetenerFieldNumber = 7,
  };
  // repeated string Moves = 8;
  int moves_size() const;
  private:
  int _internal_moves_size() const;
  public:
  void clear_moves();
  const std::string& moves(int index) const;
  std::string* mutable_moves(int index);
  void set_moves(int index, const std::string& value);
  void set_moves(int index, std::string&& value);
  void set_moves(int index, const char* value);
  void set_moves(int index, const char* value, size_t size);
  std::string* add_moves();
  void add_moves(const std::string& value);
  void add_moves(std::string&& value);
  void add_moves(const char* value);
  void add_moves(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& moves() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_moves();
  private:
  const std::string& _internal_moves(int index) const;
  std::string* _internal_add_moves();
  public:

  // repeated .pxd.proto.ArmorPiece ArmorPieces = 9;
  int armorpieces_size() const;
  private:
  int _internal_armorpieces_size() const;
  public:
  void clear_armorpieces();
  ::pxd::proto::ArmorPiece* mutable_armorpieces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::ArmorPiece >*
      mutable_armorpieces();
  private:
  const ::pxd::proto::ArmorPiece& _internal_armorpieces(int index) const;
  ::pxd::proto::ArmorPiece* _internal_add_armorpieces();
  public:
  const ::pxd::proto::ArmorPiece& armorpieces(int index) const;
  ::pxd::proto::ArmorPiece* add_armorpieces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::ArmorPiece >&
      armorpieces() const;

  // optional string RecipeId = 1;
  bool has_recipeid() const;
  private:
  bool _internal_has_recipeid() const;
  public:
  void clear_recipeid();
  const std::string& recipeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recipeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recipeid();
  std::string* release_recipeid();
  void set_allocated_recipeid(std::string* recipeid);
  private:
  const std::string& _internal_recipeid() const;
  void _internal_set_recipeid(const std::string& value);
  std::string* _internal_mutable_recipeid();
  public:

  // optional string FighterTypeId = 3;
  bool has_fightertypeid() const;
  private:
  bool _internal_has_fightertypeid() const;
  public:
  void clear_fightertypeid();
  const std::string& fightertypeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fightertypeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fightertypeid();
  std::string* release_fightertypeid();
  void set_allocated_fightertypeid(std::string* fightertypeid);
  private:
  const std::string& _internal_fightertypeid() const;
  void _internal_set_fightertypeid(const std::string& value);
  std::string* _internal_mutable_fightertypeid();
  public:

  // optional string AnimationID = 10;
  bool has_animationid() const;
  private:
  bool _internal_has_animationid() const;
  public:
  void clear_animationid();
  const std::string& animationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationid();
  std::string* release_animationid();
  void set_allocated_animationid(std::string* animationid);
  private:
  const std::string& _internal_animationid() const;
  void _internal_set_animationid(const std::string& value);
  std::string* _internal_mutable_animationid();
  public:

  // optional uint32 TournamentInstanceID = 2;
  bool has_tournamentinstanceid() const;
  private:
  bool _internal_has_tournamentinstanceid() const;
  public:
  void clear_tournamentinstanceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tournamentinstanceid() const;
  void set_tournamentinstanceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tournamentinstanceid() const;
  void _internal_set_tournamentinstanceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Quality = 4;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Rating = 5;
  bool has_rating() const;
  private:
  bool _internal_has_rating() const;
  public:
  void clear_rating();
  ::PROTOBUF_NAMESPACE_ID::uint32 rating() const;
  void set_rating(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rating() const;
  void _internal_set_rating(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Sweetness = 6;
  bool has_sweetness() const;
  private:
  bool _internal_has_sweetness() const;
  public:
  void clear_sweetness();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweetness() const;
  void set_sweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweetness() const;
  void _internal_set_sweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 HighestAppliedSweetener = 7;
  bool has_highestappliedsweetener() const;
  private:
  bool _internal_has_highestappliedsweetener() const;
  public:
  void clear_highestappliedsweetener();
  ::PROTOBUF_NAMESPACE_ID::uint32 highestappliedsweetener() const;
  void set_highestappliedsweetener(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_highestappliedsweetener() const;
  void _internal_set_highestappliedsweetener(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.Fighter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> moves_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::ArmorPiece > armorpieces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fightertypeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tournamentinstanceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rating_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweetness_;
  ::PROTOBUF_NAMESPACE_ID::uint32 highestappliedsweetener_;
  friend struct ::TableStruct_proto_2ffighter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fighter

// optional string RecipeId = 1;
inline bool Fighter::_internal_has_recipeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fighter::has_recipeid() const {
  return _internal_has_recipeid();
}
inline void Fighter::clear_recipeid() {
  recipeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Fighter::recipeid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.RecipeId)
  return _internal_recipeid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Fighter::set_recipeid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 recipeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.RecipeId)
}
inline std::string* Fighter::mutable_recipeid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Fighter.RecipeId)
  return _internal_mutable_recipeid();
}
inline const std::string& Fighter::_internal_recipeid() const {
  return recipeid_.Get();
}
inline void Fighter::_internal_set_recipeid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  recipeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Fighter::_internal_mutable_recipeid() {
  _has_bits_[0] |= 0x00000001u;
  return recipeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fighter::release_recipeid() {
  // @@protoc_insertion_point(field_release:pxd.proto.Fighter.RecipeId)
  if (!_internal_has_recipeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return recipeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fighter::set_allocated_recipeid(std::string* recipeid) {
  if (recipeid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  recipeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Fighter.RecipeId)
}

// optional uint32 TournamentInstanceID = 2;
inline bool Fighter::_internal_has_tournamentinstanceid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Fighter::has_tournamentinstanceid() const {
  return _internal_has_tournamentinstanceid();
}
inline void Fighter::clear_tournamentinstanceid() {
  tournamentinstanceid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::_internal_tournamentinstanceid() const {
  return tournamentinstanceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::tournamentinstanceid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.TournamentInstanceID)
  return _internal_tournamentinstanceid();
}
inline void Fighter::_internal_set_tournamentinstanceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tournamentinstanceid_ = value;
}
inline void Fighter::set_tournamentinstanceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tournamentinstanceid(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.TournamentInstanceID)
}

// optional string FighterTypeId = 3;
inline bool Fighter::_internal_has_fightertypeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Fighter::has_fightertypeid() const {
  return _internal_has_fightertypeid();
}
inline void Fighter::clear_fightertypeid() {
  fightertypeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Fighter::fightertypeid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.FighterTypeId)
  return _internal_fightertypeid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Fighter::set_fightertypeid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 fightertypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.FighterTypeId)
}
inline std::string* Fighter::mutable_fightertypeid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Fighter.FighterTypeId)
  return _internal_mutable_fightertypeid();
}
inline const std::string& Fighter::_internal_fightertypeid() const {
  return fightertypeid_.Get();
}
inline void Fighter::_internal_set_fightertypeid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fightertypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Fighter::_internal_mutable_fightertypeid() {
  _has_bits_[0] |= 0x00000002u;
  return fightertypeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fighter::release_fightertypeid() {
  // @@protoc_insertion_point(field_release:pxd.proto.Fighter.FighterTypeId)
  if (!_internal_has_fightertypeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fightertypeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fighter::set_allocated_fightertypeid(std::string* fightertypeid) {
  if (fightertypeid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fightertypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fightertypeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Fighter.FighterTypeId)
}

// optional uint32 Quality = 4;
inline bool Fighter::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Fighter::has_quality() const {
  return _internal_has_quality();
}
inline void Fighter::clear_quality() {
  quality_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::quality() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.Quality)
  return _internal_quality();
}
inline void Fighter::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  quality_ = value;
}
inline void Fighter::set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.Quality)
}

// optional uint32 Rating = 5;
inline bool Fighter::_internal_has_rating() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Fighter::has_rating() const {
  return _internal_has_rating();
}
inline void Fighter::clear_rating() {
  rating_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::_internal_rating() const {
  return rating_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::rating() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.Rating)
  return _internal_rating();
}
inline void Fighter::_internal_set_rating(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rating_ = value;
}
inline void Fighter::set_rating(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rating(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.Rating)
}

// optional uint32 Sweetness = 6;
inline bool Fighter::_internal_has_sweetness() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Fighter::has_sweetness() const {
  return _internal_has_sweetness();
}
inline void Fighter::clear_sweetness() {
  sweetness_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::_internal_sweetness() const {
  return sweetness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::sweetness() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.Sweetness)
  return _internal_sweetness();
}
inline void Fighter::_internal_set_sweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  sweetness_ = value;
}
inline void Fighter::set_sweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweetness(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.Sweetness)
}

// optional uint32 HighestAppliedSweetener = 7;
inline bool Fighter::_internal_has_highestappliedsweetener() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Fighter::has_highestappliedsweetener() const {
  return _internal_has_highestappliedsweetener();
}
inline void Fighter::clear_highestappliedsweetener() {
  highestappliedsweetener_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::_internal_highestappliedsweetener() const {
  return highestappliedsweetener_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fighter::highestappliedsweetener() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.HighestAppliedSweetener)
  return _internal_highestappliedsweetener();
}
inline void Fighter::_internal_set_highestappliedsweetener(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  highestappliedsweetener_ = value;
}
inline void Fighter::set_highestappliedsweetener(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_highestappliedsweetener(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.HighestAppliedSweetener)
}

// repeated string Moves = 8;
inline int Fighter::_internal_moves_size() const {
  return moves_.size();
}
inline int Fighter::moves_size() const {
  return _internal_moves_size();
}
inline void Fighter::clear_moves() {
  moves_.Clear();
}
inline std::string* Fighter::add_moves() {
  // @@protoc_insertion_point(field_add_mutable:pxd.proto.Fighter.Moves)
  return _internal_add_moves();
}
inline const std::string& Fighter::_internal_moves(int index) const {
  return moves_.Get(index);
}
inline const std::string& Fighter::moves(int index) const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.Moves)
  return _internal_moves(index);
}
inline std::string* Fighter::mutable_moves(int index) {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Fighter.Moves)
  return moves_.Mutable(index);
}
inline void Fighter::set_moves(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.Moves)
  moves_.Mutable(index)->assign(value);
}
inline void Fighter::set_moves(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.Moves)
  moves_.Mutable(index)->assign(std::move(value));
}
inline void Fighter::set_moves(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  moves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pxd.proto.Fighter.Moves)
}
inline void Fighter::set_moves(int index, const char* value, size_t size) {
  moves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pxd.proto.Fighter.Moves)
}
inline std::string* Fighter::_internal_add_moves() {
  return moves_.Add();
}
inline void Fighter::add_moves(const std::string& value) {
  moves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pxd.proto.Fighter.Moves)
}
inline void Fighter::add_moves(std::string&& value) {
  moves_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pxd.proto.Fighter.Moves)
}
inline void Fighter::add_moves(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  moves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pxd.proto.Fighter.Moves)
}
inline void Fighter::add_moves(const char* value, size_t size) {
  moves_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pxd.proto.Fighter.Moves)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Fighter::moves() const {
  // @@protoc_insertion_point(field_list:pxd.proto.Fighter.Moves)
  return moves_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Fighter::mutable_moves() {
  // @@protoc_insertion_point(field_mutable_list:pxd.proto.Fighter.Moves)
  return &moves_;
}

// repeated .pxd.proto.ArmorPiece ArmorPieces = 9;
inline int Fighter::_internal_armorpieces_size() const {
  return armorpieces_.size();
}
inline int Fighter::armorpieces_size() const {
  return _internal_armorpieces_size();
}
inline ::pxd::proto::ArmorPiece* Fighter::mutable_armorpieces(int index) {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Fighter.ArmorPieces)
  return armorpieces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::ArmorPiece >*
Fighter::mutable_armorpieces() {
  // @@protoc_insertion_point(field_mutable_list:pxd.proto.Fighter.ArmorPieces)
  return &armorpieces_;
}
inline const ::pxd::proto::ArmorPiece& Fighter::_internal_armorpieces(int index) const {
  return armorpieces_.Get(index);
}
inline const ::pxd::proto::ArmorPiece& Fighter::armorpieces(int index) const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.ArmorPieces)
  return _internal_armorpieces(index);
}
inline ::pxd::proto::ArmorPiece* Fighter::_internal_add_armorpieces() {
  return armorpieces_.Add();
}
inline ::pxd::proto::ArmorPiece* Fighter::add_armorpieces() {
  // @@protoc_insertion_point(field_add:pxd.proto.Fighter.ArmorPieces)
  return _internal_add_armorpieces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::ArmorPiece >&
Fighter::armorpieces() const {
  // @@protoc_insertion_point(field_list:pxd.proto.Fighter.ArmorPieces)
  return armorpieces_;
}

// optional string AnimationID = 10;
inline bool Fighter::_internal_has_animationid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Fighter::has_animationid() const {
  return _internal_has_animationid();
}
inline void Fighter::clear_animationid() {
  animationid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Fighter::animationid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Fighter.AnimationID)
  return _internal_animationid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Fighter::set_animationid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Fighter.AnimationID)
}
inline std::string* Fighter::mutable_animationid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Fighter.AnimationID)
  return _internal_mutable_animationid();
}
inline const std::string& Fighter::_internal_animationid() const {
  return animationid_.Get();
}
inline void Fighter::_internal_set_animationid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Fighter::_internal_mutable_animationid() {
  _has_bits_[0] |= 0x00000004u;
  return animationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fighter::release_animationid() {
  // @@protoc_insertion_point(field_release:pxd.proto.Fighter.AnimationID)
  if (!_internal_has_animationid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return animationid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fighter::set_allocated_animationid(std::string* animationid) {
  if (animationid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  animationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Fighter.AnimationID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ffighter_2eproto
