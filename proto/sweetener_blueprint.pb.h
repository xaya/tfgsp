// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sweetener_blueprint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fsweetener_5fblueprint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fsweetener_5fblueprint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fsweetener_5fblueprint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fsweetener_5fblueprint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsweetener_5fblueprint_2eproto;
namespace pxd {
namespace proto {
class AuthoredSweetenerRewardChoice;
struct AuthoredSweetenerRewardChoiceDefaultTypeInternal;
extern AuthoredSweetenerRewardChoiceDefaultTypeInternal _AuthoredSweetenerRewardChoice_default_instance_;
class AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse;
struct AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUseDefaultTypeInternal;
extern AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUseDefaultTypeInternal _AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse_default_instance_;
class SweetenerBlueprint;
struct SweetenerBlueprintDefaultTypeInternal;
extern SweetenerBlueprintDefaultTypeInternal _SweetenerBlueprint_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::AuthoredSweetenerRewardChoice* Arena::CreateMaybeMessage<::pxd::proto::AuthoredSweetenerRewardChoice>(Arena*);
template<> ::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse* Arena::CreateMaybeMessage<::pxd::proto::AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse>(Arena*);
template<> ::pxd::proto::SweetenerBlueprint* Arena::CreateMaybeMessage<::pxd::proto::SweetenerBlueprint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse();
  explicit constexpr AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse& other);
  static const AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse*>(&_AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pxd.proto.AuthoredSweetenerRewardChoice.RequiredCandyEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AuthoredSweetenerRewardChoice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.AuthoredSweetenerRewardChoice) */ {
 public:
  inline AuthoredSweetenerRewardChoice() : AuthoredSweetenerRewardChoice(nullptr) {}
  ~AuthoredSweetenerRewardChoice() override;
  explicit constexpr AuthoredSweetenerRewardChoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthoredSweetenerRewardChoice(const AuthoredSweetenerRewardChoice& from);
  AuthoredSweetenerRewardChoice(AuthoredSweetenerRewardChoice&& from) noexcept
    : AuthoredSweetenerRewardChoice() {
    *this = ::std::move(from);
  }

  inline AuthoredSweetenerRewardChoice& operator=(const AuthoredSweetenerRewardChoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthoredSweetenerRewardChoice& operator=(AuthoredSweetenerRewardChoice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthoredSweetenerRewardChoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthoredSweetenerRewardChoice* internal_default_instance() {
    return reinterpret_cast<const AuthoredSweetenerRewardChoice*>(
               &_AuthoredSweetenerRewardChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthoredSweetenerRewardChoice& a, AuthoredSweetenerRewardChoice& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthoredSweetenerRewardChoice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthoredSweetenerRewardChoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthoredSweetenerRewardChoice* New() const final {
    return CreateMaybeMessage<AuthoredSweetenerRewardChoice>(nullptr);
  }

  AuthoredSweetenerRewardChoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthoredSweetenerRewardChoice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthoredSweetenerRewardChoice& from);
  void MergeFrom(const AuthoredSweetenerRewardChoice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthoredSweetenerRewardChoice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.AuthoredSweetenerRewardChoice";
  }
  protected:
  explicit AuthoredSweetenerRewardChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRequiredCandyFieldNumber = 8,
    kDescriptionFieldNumber = 1,
    kRewardsTableIdFieldNumber = 2,
    kArmorRewardsTableIdFieldNumber = 4,
    kMoveRewardsTableIdFieldNumber = 6,
    kBaseRollCountFieldNumber = 3,
    kArmorRollCountFieldNumber = 5,
    kMoveRollCountFieldNumber = 7,
  };
  // map<string, uint32> RequiredCandy = 8;
  int requiredcandy_size() const;
  private:
  int _internal_requiredcandy_size() const;
  public:
  void clear_requiredcandy();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_requiredcandy() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_requiredcandy();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      requiredcandy() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_requiredcandy();

  // optional string Description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string RewardsTableId = 2;
  bool has_rewardstableid() const;
  private:
  bool _internal_has_rewardstableid() const;
  public:
  void clear_rewardstableid();
  const std::string& rewardstableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rewardstableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rewardstableid();
  std::string* release_rewardstableid();
  void set_allocated_rewardstableid(std::string* rewardstableid);
  private:
  const std::string& _internal_rewardstableid() const;
  void _internal_set_rewardstableid(const std::string& value);
  std::string* _internal_mutable_rewardstableid();
  public:

  // optional string ArmorRewardsTableId = 4;
  bool has_armorrewardstableid() const;
  private:
  bool _internal_has_armorrewardstableid() const;
  public:
  void clear_armorrewardstableid();
  const std::string& armorrewardstableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_armorrewardstableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_armorrewardstableid();
  std::string* release_armorrewardstableid();
  void set_allocated_armorrewardstableid(std::string* armorrewardstableid);
  private:
  const std::string& _internal_armorrewardstableid() const;
  void _internal_set_armorrewardstableid(const std::string& value);
  std::string* _internal_mutable_armorrewardstableid();
  public:

  // optional string MoveRewardsTableId = 6;
  bool has_moverewardstableid() const;
  private:
  bool _internal_has_moverewardstableid() const;
  public:
  void clear_moverewardstableid();
  const std::string& moverewardstableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_moverewardstableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_moverewardstableid();
  std::string* release_moverewardstableid();
  void set_allocated_moverewardstableid(std::string* moverewardstableid);
  private:
  const std::string& _internal_moverewardstableid() const;
  void _internal_set_moverewardstableid(const std::string& value);
  std::string* _internal_mutable_moverewardstableid();
  public:

  // optional uint32 BaseRollCount = 3;
  bool has_baserollcount() const;
  private:
  bool _internal_has_baserollcount() const;
  public:
  void clear_baserollcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 baserollcount() const;
  void set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baserollcount() const;
  void _internal_set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ArmorRollCount = 5;
  bool has_armorrollcount() const;
  private:
  bool _internal_has_armorrollcount() const;
  public:
  void clear_armorrollcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 armorrollcount() const;
  void set_armorrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_armorrollcount() const;
  void _internal_set_armorrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MoveRollCount = 7;
  bool has_moverollcount() const;
  private:
  bool _internal_has_moverollcount() const;
  public:
  void clear_moverollcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 moverollcount() const;
  void set_moverollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_moverollcount() const;
  void _internal_set_moverollcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.AuthoredSweetenerRewardChoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AuthoredSweetenerRewardChoice_RequiredCandyEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> requiredcandy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rewardstableid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr armorrewardstableid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moverewardstableid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baserollcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 armorrollcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 moverollcount_;
  friend struct ::TableStruct_proto_2fsweetener_5fblueprint_2eproto;
};
// -------------------------------------------------------------------

class SweetenerBlueprint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.SweetenerBlueprint) */ {
 public:
  inline SweetenerBlueprint() : SweetenerBlueprint(nullptr) {}
  ~SweetenerBlueprint() override;
  explicit constexpr SweetenerBlueprint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SweetenerBlueprint(const SweetenerBlueprint& from);
  SweetenerBlueprint(SweetenerBlueprint&& from) noexcept
    : SweetenerBlueprint() {
    *this = ::std::move(from);
  }

  inline SweetenerBlueprint& operator=(const SweetenerBlueprint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SweetenerBlueprint& operator=(SweetenerBlueprint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SweetenerBlueprint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SweetenerBlueprint* internal_default_instance() {
    return reinterpret_cast<const SweetenerBlueprint*>(
               &_SweetenerBlueprint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SweetenerBlueprint& a, SweetenerBlueprint& b) {
    a.Swap(&b);
  }
  inline void Swap(SweetenerBlueprint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SweetenerBlueprint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SweetenerBlueprint* New() const final {
    return CreateMaybeMessage<SweetenerBlueprint>(nullptr);
  }

  SweetenerBlueprint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SweetenerBlueprint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SweetenerBlueprint& from);
  void MergeFrom(const SweetenerBlueprint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SweetenerBlueprint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.SweetenerBlueprint";
  }
  protected:
  explicit SweetenerBlueprint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardChoicesFieldNumber = 8,
    kAuthoredIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kPriceFieldNumber = 4,
    kDurationFieldNumber = 5,
    kCookCostFieldNumber = 6,
    kRequiredSweetnessFieldNumber = 7,
  };
  // repeated .pxd.proto.AuthoredSweetenerRewardChoice RewardChoices = 8;
  int rewardchoices_size() const;
  private:
  int _internal_rewardchoices_size() const;
  public:
  void clear_rewardchoices();
  ::pxd::proto::AuthoredSweetenerRewardChoice* mutable_rewardchoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredSweetenerRewardChoice >*
      mutable_rewardchoices();
  private:
  const ::pxd::proto::AuthoredSweetenerRewardChoice& _internal_rewardchoices(int index) const;
  ::pxd::proto::AuthoredSweetenerRewardChoice* _internal_add_rewardchoices();
  public:
  const ::pxd::proto::AuthoredSweetenerRewardChoice& rewardchoices(int index) const;
  ::pxd::proto::AuthoredSweetenerRewardChoice* add_rewardchoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredSweetenerRewardChoice >&
      rewardchoices() const;

  // optional string AuthoredId = 1;
  bool has_authoredid() const;
  private:
  bool _internal_has_authoredid() const;
  public:
  void clear_authoredid();
  const std::string& authoredid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authoredid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authoredid();
  std::string* release_authoredid();
  void set_allocated_authoredid(std::string* authoredid);
  private:
  const std::string& _internal_authoredid() const;
  void _internal_set_authoredid(const std::string& value);
  std::string* _internal_mutable_authoredid();
  public:

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional uint32 Price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Duration = 5;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 CookCost = 6;
  bool has_cookcost() const;
  private:
  bool _internal_has_cookcost() const;
  public:
  void clear_cookcost();
  ::PROTOBUF_NAMESPACE_ID::uint32 cookcost() const;
  void set_cookcost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cookcost() const;
  void _internal_set_cookcost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 RequiredSweetness = 7;
  bool has_requiredsweetness() const;
  private:
  bool _internal_has_requiredsweetness() const;
  public:
  void clear_requiredsweetness();
  ::PROTOBUF_NAMESPACE_ID::uint32 requiredsweetness() const;
  void set_requiredsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requiredsweetness() const;
  void _internal_set_requiredsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.SweetenerBlueprint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredSweetenerRewardChoice > rewardchoices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authoredid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cookcost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requiredsweetness_;
  friend struct ::TableStruct_proto_2fsweetener_5fblueprint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AuthoredSweetenerRewardChoice

// optional string Description = 1;
inline bool AuthoredSweetenerRewardChoice::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthoredSweetenerRewardChoice::has_description() const {
  return _internal_has_description();
}
inline void AuthoredSweetenerRewardChoice::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthoredSweetenerRewardChoice::description() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredSweetenerRewardChoice.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredSweetenerRewardChoice::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredSweetenerRewardChoice.Description)
}
inline std::string* AuthoredSweetenerRewardChoice::mutable_description() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredSweetenerRewardChoice.Description)
  return _internal_mutable_description();
}
inline const std::string& AuthoredSweetenerRewardChoice::_internal_description() const {
  return description_.Get();
}
inline void AuthoredSweetenerRewardChoice::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::release_description() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredSweetenerRewardChoice.Description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredSweetenerRewardChoice::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredSweetenerRewardChoice.Description)
}

// optional string RewardsTableId = 2;
inline bool AuthoredSweetenerRewardChoice::_internal_has_rewardstableid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthoredSweetenerRewardChoice::has_rewardstableid() const {
  return _internal_has_rewardstableid();
}
inline void AuthoredSweetenerRewardChoice::clear_rewardstableid() {
  rewardstableid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthoredSweetenerRewardChoice::rewardstableid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredSweetenerRewardChoice.RewardsTableId)
  return _internal_rewardstableid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredSweetenerRewardChoice::set_rewardstableid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 rewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredSweetenerRewardChoice.RewardsTableId)
}
inline std::string* AuthoredSweetenerRewardChoice::mutable_rewardstableid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredSweetenerRewardChoice.RewardsTableId)
  return _internal_mutable_rewardstableid();
}
inline const std::string& AuthoredSweetenerRewardChoice::_internal_rewardstableid() const {
  return rewardstableid_.Get();
}
inline void AuthoredSweetenerRewardChoice::_internal_set_rewardstableid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::_internal_mutable_rewardstableid() {
  _has_bits_[0] |= 0x00000002u;
  return rewardstableid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::release_rewardstableid() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredSweetenerRewardChoice.RewardsTableId)
  if (!_internal_has_rewardstableid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rewardstableid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredSweetenerRewardChoice::set_allocated_rewardstableid(std::string* rewardstableid) {
  if (rewardstableid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rewardstableid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rewardstableid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredSweetenerRewardChoice.RewardsTableId)
}

// optional uint32 BaseRollCount = 3;
inline bool AuthoredSweetenerRewardChoice::_internal_has_baserollcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AuthoredSweetenerRewardChoice::has_baserollcount() const {
  return _internal_has_baserollcount();
}
inline void AuthoredSweetenerRewardChoice::clear_baserollcount() {
  baserollcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredSweetenerRewardChoice::_internal_baserollcount() const {
  return baserollcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredSweetenerRewardChoice::baserollcount() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredSweetenerRewardChoice.BaseRollCount)
  return _internal_baserollcount();
}
inline void AuthoredSweetenerRewardChoice::_internal_set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  baserollcount_ = value;
}
inline void AuthoredSweetenerRewardChoice::set_baserollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baserollcount(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredSweetenerRewardChoice.BaseRollCount)
}

// optional string ArmorRewardsTableId = 4;
inline bool AuthoredSweetenerRewardChoice::_internal_has_armorrewardstableid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthoredSweetenerRewardChoice::has_armorrewardstableid() const {
  return _internal_has_armorrewardstableid();
}
inline void AuthoredSweetenerRewardChoice::clear_armorrewardstableid() {
  armorrewardstableid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AuthoredSweetenerRewardChoice::armorrewardstableid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredSweetenerRewardChoice.ArmorRewardsTableId)
  return _internal_armorrewardstableid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredSweetenerRewardChoice::set_armorrewardstableid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 armorrewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredSweetenerRewardChoice.ArmorRewardsTableId)
}
inline std::string* AuthoredSweetenerRewardChoice::mutable_armorrewardstableid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredSweetenerRewardChoice.ArmorRewardsTableId)
  return _internal_mutable_armorrewardstableid();
}
inline const std::string& AuthoredSweetenerRewardChoice::_internal_armorrewardstableid() const {
  return armorrewardstableid_.Get();
}
inline void AuthoredSweetenerRewardChoice::_internal_set_armorrewardstableid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  armorrewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::_internal_mutable_armorrewardstableid() {
  _has_bits_[0] |= 0x00000004u;
  return armorrewardstableid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::release_armorrewardstableid() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredSweetenerRewardChoice.ArmorRewardsTableId)
  if (!_internal_has_armorrewardstableid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return armorrewardstableid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredSweetenerRewardChoice::set_allocated_armorrewardstableid(std::string* armorrewardstableid) {
  if (armorrewardstableid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  armorrewardstableid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), armorrewardstableid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredSweetenerRewardChoice.ArmorRewardsTableId)
}

// optional uint32 ArmorRollCount = 5;
inline bool AuthoredSweetenerRewardChoice::_internal_has_armorrollcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AuthoredSweetenerRewardChoice::has_armorrollcount() const {
  return _internal_has_armorrollcount();
}
inline void AuthoredSweetenerRewardChoice::clear_armorrollcount() {
  armorrollcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredSweetenerRewardChoice::_internal_armorrollcount() const {
  return armorrollcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredSweetenerRewardChoice::armorrollcount() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredSweetenerRewardChoice.ArmorRollCount)
  return _internal_armorrollcount();
}
inline void AuthoredSweetenerRewardChoice::_internal_set_armorrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  armorrollcount_ = value;
}
inline void AuthoredSweetenerRewardChoice::set_armorrollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_armorrollcount(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredSweetenerRewardChoice.ArmorRollCount)
}

// optional string MoveRewardsTableId = 6;
inline bool AuthoredSweetenerRewardChoice::_internal_has_moverewardstableid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthoredSweetenerRewardChoice::has_moverewardstableid() const {
  return _internal_has_moverewardstableid();
}
inline void AuthoredSweetenerRewardChoice::clear_moverewardstableid() {
  moverewardstableid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AuthoredSweetenerRewardChoice::moverewardstableid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredSweetenerRewardChoice.MoveRewardsTableId)
  return _internal_moverewardstableid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredSweetenerRewardChoice::set_moverewardstableid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 moverewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredSweetenerRewardChoice.MoveRewardsTableId)
}
inline std::string* AuthoredSweetenerRewardChoice::mutable_moverewardstableid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredSweetenerRewardChoice.MoveRewardsTableId)
  return _internal_mutable_moverewardstableid();
}
inline const std::string& AuthoredSweetenerRewardChoice::_internal_moverewardstableid() const {
  return moverewardstableid_.Get();
}
inline void AuthoredSweetenerRewardChoice::_internal_set_moverewardstableid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  moverewardstableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::_internal_mutable_moverewardstableid() {
  _has_bits_[0] |= 0x00000008u;
  return moverewardstableid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredSweetenerRewardChoice::release_moverewardstableid() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredSweetenerRewardChoice.MoveRewardsTableId)
  if (!_internal_has_moverewardstableid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return moverewardstableid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredSweetenerRewardChoice::set_allocated_moverewardstableid(std::string* moverewardstableid) {
  if (moverewardstableid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  moverewardstableid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moverewardstableid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredSweetenerRewardChoice.MoveRewardsTableId)
}

// optional uint32 MoveRollCount = 7;
inline bool AuthoredSweetenerRewardChoice::_internal_has_moverollcount() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AuthoredSweetenerRewardChoice::has_moverollcount() const {
  return _internal_has_moverollcount();
}
inline void AuthoredSweetenerRewardChoice::clear_moverollcount() {
  moverollcount_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredSweetenerRewardChoice::_internal_moverollcount() const {
  return moverollcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredSweetenerRewardChoice::moverollcount() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredSweetenerRewardChoice.MoveRollCount)
  return _internal_moverollcount();
}
inline void AuthoredSweetenerRewardChoice::_internal_set_moverollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  moverollcount_ = value;
}
inline void AuthoredSweetenerRewardChoice::set_moverollcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_moverollcount(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredSweetenerRewardChoice.MoveRollCount)
}

// map<string, uint32> RequiredCandy = 8;
inline int AuthoredSweetenerRewardChoice::_internal_requiredcandy_size() const {
  return requiredcandy_.size();
}
inline int AuthoredSweetenerRewardChoice::requiredcandy_size() const {
  return _internal_requiredcandy_size();
}
inline void AuthoredSweetenerRewardChoice::clear_requiredcandy() {
  requiredcandy_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
AuthoredSweetenerRewardChoice::_internal_requiredcandy() const {
  return requiredcandy_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
AuthoredSweetenerRewardChoice::requiredcandy() const {
  // @@protoc_insertion_point(field_map:pxd.proto.AuthoredSweetenerRewardChoice.RequiredCandy)
  return _internal_requiredcandy();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
AuthoredSweetenerRewardChoice::_internal_mutable_requiredcandy() {
  return requiredcandy_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
AuthoredSweetenerRewardChoice::mutable_requiredcandy() {
  // @@protoc_insertion_point(field_mutable_map:pxd.proto.AuthoredSweetenerRewardChoice.RequiredCandy)
  return _internal_mutable_requiredcandy();
}

// -------------------------------------------------------------------

// SweetenerBlueprint

// optional string AuthoredId = 1;
inline bool SweetenerBlueprint::_internal_has_authoredid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SweetenerBlueprint::has_authoredid() const {
  return _internal_has_authoredid();
}
inline void SweetenerBlueprint::clear_authoredid() {
  authoredid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SweetenerBlueprint::authoredid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.AuthoredId)
  return _internal_authoredid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SweetenerBlueprint::set_authoredid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.SweetenerBlueprint.AuthoredId)
}
inline std::string* SweetenerBlueprint::mutable_authoredid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.SweetenerBlueprint.AuthoredId)
  return _internal_mutable_authoredid();
}
inline const std::string& SweetenerBlueprint::_internal_authoredid() const {
  return authoredid_.Get();
}
inline void SweetenerBlueprint::_internal_set_authoredid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SweetenerBlueprint::_internal_mutable_authoredid() {
  _has_bits_[0] |= 0x00000001u;
  return authoredid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SweetenerBlueprint::release_authoredid() {
  // @@protoc_insertion_point(field_release:pxd.proto.SweetenerBlueprint.AuthoredId)
  if (!_internal_has_authoredid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return authoredid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SweetenerBlueprint::set_allocated_authoredid(std::string* authoredid) {
  if (authoredid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  authoredid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authoredid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.SweetenerBlueprint.AuthoredId)
}

// optional string Name = 2;
inline bool SweetenerBlueprint::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SweetenerBlueprint::has_name() const {
  return _internal_has_name();
}
inline void SweetenerBlueprint::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SweetenerBlueprint::name() const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SweetenerBlueprint::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.SweetenerBlueprint.Name)
}
inline std::string* SweetenerBlueprint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.SweetenerBlueprint.Name)
  return _internal_mutable_name();
}
inline const std::string& SweetenerBlueprint::_internal_name() const {
  return name_.Get();
}
inline void SweetenerBlueprint::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SweetenerBlueprint::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SweetenerBlueprint::release_name() {
  // @@protoc_insertion_point(field_release:pxd.proto.SweetenerBlueprint.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SweetenerBlueprint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.SweetenerBlueprint.Name)
}

// optional string Description = 3;
inline bool SweetenerBlueprint::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SweetenerBlueprint::has_description() const {
  return _internal_has_description();
}
inline void SweetenerBlueprint::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SweetenerBlueprint::description() const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SweetenerBlueprint::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.SweetenerBlueprint.Description)
}
inline std::string* SweetenerBlueprint::mutable_description() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.SweetenerBlueprint.Description)
  return _internal_mutable_description();
}
inline const std::string& SweetenerBlueprint::_internal_description() const {
  return description_.Get();
}
inline void SweetenerBlueprint::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SweetenerBlueprint::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SweetenerBlueprint::release_description() {
  // @@protoc_insertion_point(field_release:pxd.proto.SweetenerBlueprint.Description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SweetenerBlueprint::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.SweetenerBlueprint.Description)
}

// optional uint32 Price = 4;
inline bool SweetenerBlueprint::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SweetenerBlueprint::has_price() const {
  return _internal_has_price();
}
inline void SweetenerBlueprint::clear_price() {
  price_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::price() const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.Price)
  return _internal_price();
}
inline void SweetenerBlueprint::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  price_ = value;
}
inline void SweetenerBlueprint::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:pxd.proto.SweetenerBlueprint.Price)
}

// optional uint32 Duration = 5;
inline bool SweetenerBlueprint::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SweetenerBlueprint::has_duration() const {
  return _internal_has_duration();
}
inline void SweetenerBlueprint::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::duration() const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.Duration)
  return _internal_duration();
}
inline void SweetenerBlueprint::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  duration_ = value;
}
inline void SweetenerBlueprint::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pxd.proto.SweetenerBlueprint.Duration)
}

// optional uint32 CookCost = 6;
inline bool SweetenerBlueprint::_internal_has_cookcost() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SweetenerBlueprint::has_cookcost() const {
  return _internal_has_cookcost();
}
inline void SweetenerBlueprint::clear_cookcost() {
  cookcost_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::_internal_cookcost() const {
  return cookcost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::cookcost() const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.CookCost)
  return _internal_cookcost();
}
inline void SweetenerBlueprint::_internal_set_cookcost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  cookcost_ = value;
}
inline void SweetenerBlueprint::set_cookcost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cookcost(value);
  // @@protoc_insertion_point(field_set:pxd.proto.SweetenerBlueprint.CookCost)
}

// optional uint32 RequiredSweetness = 7;
inline bool SweetenerBlueprint::_internal_has_requiredsweetness() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SweetenerBlueprint::has_requiredsweetness() const {
  return _internal_has_requiredsweetness();
}
inline void SweetenerBlueprint::clear_requiredsweetness() {
  requiredsweetness_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::_internal_requiredsweetness() const {
  return requiredsweetness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SweetenerBlueprint::requiredsweetness() const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.RequiredSweetness)
  return _internal_requiredsweetness();
}
inline void SweetenerBlueprint::_internal_set_requiredsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  requiredsweetness_ = value;
}
inline void SweetenerBlueprint::set_requiredsweetness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requiredsweetness(value);
  // @@protoc_insertion_point(field_set:pxd.proto.SweetenerBlueprint.RequiredSweetness)
}

// repeated .pxd.proto.AuthoredSweetenerRewardChoice RewardChoices = 8;
inline int SweetenerBlueprint::_internal_rewardchoices_size() const {
  return rewardchoices_.size();
}
inline int SweetenerBlueprint::rewardchoices_size() const {
  return _internal_rewardchoices_size();
}
inline void SweetenerBlueprint::clear_rewardchoices() {
  rewardchoices_.Clear();
}
inline ::pxd::proto::AuthoredSweetenerRewardChoice* SweetenerBlueprint::mutable_rewardchoices(int index) {
  // @@protoc_insertion_point(field_mutable:pxd.proto.SweetenerBlueprint.RewardChoices)
  return rewardchoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredSweetenerRewardChoice >*
SweetenerBlueprint::mutable_rewardchoices() {
  // @@protoc_insertion_point(field_mutable_list:pxd.proto.SweetenerBlueprint.RewardChoices)
  return &rewardchoices_;
}
inline const ::pxd::proto::AuthoredSweetenerRewardChoice& SweetenerBlueprint::_internal_rewardchoices(int index) const {
  return rewardchoices_.Get(index);
}
inline const ::pxd::proto::AuthoredSweetenerRewardChoice& SweetenerBlueprint::rewardchoices(int index) const {
  // @@protoc_insertion_point(field_get:pxd.proto.SweetenerBlueprint.RewardChoices)
  return _internal_rewardchoices(index);
}
inline ::pxd::proto::AuthoredSweetenerRewardChoice* SweetenerBlueprint::_internal_add_rewardchoices() {
  return rewardchoices_.Add();
}
inline ::pxd::proto::AuthoredSweetenerRewardChoice* SweetenerBlueprint::add_rewardchoices() {
  // @@protoc_insertion_point(field_add:pxd.proto.SweetenerBlueprint.RewardChoices)
  return _internal_add_rewardchoices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredSweetenerRewardChoice >&
SweetenerBlueprint::rewardchoices() const {
  // @@protoc_insertion_point(field_list:pxd.proto.SweetenerBlueprint.RewardChoices)
  return rewardchoices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fsweetener_5fblueprint_2eproto
