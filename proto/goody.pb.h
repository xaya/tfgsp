// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/goody.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fgoody_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fgoody_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fgoody_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fgoody_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fgoody_2eproto;
namespace pxd {
namespace proto {
class Goody;
struct GoodyDefaultTypeInternal;
extern GoodyDefaultTypeInternal _Goody_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::Goody* Arena::CreateMaybeMessage<::pxd::proto::Goody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class Goody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.Goody) */ {
 public:
  inline Goody() : Goody(nullptr) {}
  ~Goody() override;
  explicit constexpr Goody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Goody(const Goody& from);
  Goody(Goody&& from) noexcept
    : Goody() {
    *this = ::std::move(from);
  }

  inline Goody& operator=(const Goody& from) {
    CopyFrom(from);
    return *this;
  }
  inline Goody& operator=(Goody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Goody& default_instance() {
    return *internal_default_instance();
  }
  static inline const Goody* internal_default_instance() {
    return reinterpret_cast<const Goody*>(
               &_Goody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Goody& a, Goody& b) {
    a.Swap(&b);
  }
  inline void Swap(Goody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Goody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Goody* New() const final {
    return CreateMaybeMessage<Goody>(nullptr);
  }

  Goody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Goody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Goody& from);
  void MergeFrom(const Goody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.Goody";
  }
  protected:
  explicit Goody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthoredIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kPriceFieldNumber = 4,
    kGoodyTypeFieldNumber = 5,
    kReductionPercentFieldNumber = 7,
    kUsesFieldNumber = 6,
  };
  // optional string AuthoredId = 1;
  bool has_authoredid() const;
  private:
  bool _internal_has_authoredid() const;
  public:
  void clear_authoredid();
  const std::string& authoredid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authoredid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authoredid();
  std::string* release_authoredid();
  void set_allocated_authoredid(std::string* authoredid);
  private:
  const std::string& _internal_authoredid() const;
  void _internal_set_authoredid(const std::string& value);
  std::string* _internal_mutable_authoredid();
  public:

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional uint32 Price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 GoodyType = 5;
  bool has_goodytype() const;
  private:
  bool _internal_has_goodytype() const;
  public:
  void clear_goodytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 goodytype() const;
  void set_goodytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_goodytype() const;
  void _internal_set_goodytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double ReductionPercent = 7;
  bool has_reductionpercent() const;
  private:
  bool _internal_has_reductionpercent() const;
  public:
  void clear_reductionpercent();
  double reductionpercent() const;
  void set_reductionpercent(double value);
  private:
  double _internal_reductionpercent() const;
  void _internal_set_reductionpercent(double value);
  public:

  // optional uint32 Uses = 6;
  bool has_uses() const;
  private:
  bool _internal_has_uses() const;
  public:
  void clear_uses();
  ::PROTOBUF_NAMESPACE_ID::uint32 uses() const;
  void set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uses() const;
  void _internal_set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.Goody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authoredid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goodytype_;
  double reductionpercent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uses_;
  friend struct ::TableStruct_proto_2fgoody_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Goody

// optional string AuthoredId = 1;
inline bool Goody::_internal_has_authoredid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Goody::has_authoredid() const {
  return _internal_has_authoredid();
}
inline void Goody::clear_authoredid() {
  authoredid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Goody::authoredid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Goody.AuthoredId)
  return _internal_authoredid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Goody::set_authoredid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Goody.AuthoredId)
}
inline std::string* Goody::mutable_authoredid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Goody.AuthoredId)
  return _internal_mutable_authoredid();
}
inline const std::string& Goody::_internal_authoredid() const {
  return authoredid_.Get();
}
inline void Goody::_internal_set_authoredid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Goody::_internal_mutable_authoredid() {
  _has_bits_[0] |= 0x00000001u;
  return authoredid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Goody::release_authoredid() {
  // @@protoc_insertion_point(field_release:pxd.proto.Goody.AuthoredId)
  if (!_internal_has_authoredid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return authoredid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Goody::set_allocated_authoredid(std::string* authoredid) {
  if (authoredid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  authoredid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authoredid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Goody.AuthoredId)
}

// optional string Name = 2;
inline bool Goody::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Goody::has_name() const {
  return _internal_has_name();
}
inline void Goody::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Goody::name() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Goody.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Goody::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Goody.Name)
}
inline std::string* Goody::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Goody.Name)
  return _internal_mutable_name();
}
inline const std::string& Goody::_internal_name() const {
  return name_.Get();
}
inline void Goody::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Goody::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Goody::release_name() {
  // @@protoc_insertion_point(field_release:pxd.proto.Goody.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Goody::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Goody.Name)
}

// optional string Description = 3;
inline bool Goody::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Goody::has_description() const {
  return _internal_has_description();
}
inline void Goody::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Goody::description() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Goody.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Goody::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.Goody.Description)
}
inline std::string* Goody::mutable_description() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.Goody.Description)
  return _internal_mutable_description();
}
inline const std::string& Goody::_internal_description() const {
  return description_.Get();
}
inline void Goody::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Goody::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Goody::release_description() {
  // @@protoc_insertion_point(field_release:pxd.proto.Goody.Description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Goody::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.Goody.Description)
}

// optional uint32 Price = 4;
inline bool Goody::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Goody::has_price() const {
  return _internal_has_price();
}
inline void Goody::clear_price() {
  price_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Goody::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Goody::price() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Goody.Price)
  return _internal_price();
}
inline void Goody::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  price_ = value;
}
inline void Goody::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Goody.Price)
}

// optional uint32 GoodyType = 5;
inline bool Goody::_internal_has_goodytype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Goody::has_goodytype() const {
  return _internal_has_goodytype();
}
inline void Goody::clear_goodytype() {
  goodytype_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Goody::_internal_goodytype() const {
  return goodytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Goody::goodytype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Goody.GoodyType)
  return _internal_goodytype();
}
inline void Goody::_internal_set_goodytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  goodytype_ = value;
}
inline void Goody::set_goodytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_goodytype(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Goody.GoodyType)
}

// optional uint32 Uses = 6;
inline bool Goody::_internal_has_uses() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Goody::has_uses() const {
  return _internal_has_uses();
}
inline void Goody::clear_uses() {
  uses_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Goody::_internal_uses() const {
  return uses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Goody::uses() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Goody.Uses)
  return _internal_uses();
}
inline void Goody::_internal_set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  uses_ = value;
}
inline void Goody::set_uses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uses(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Goody.Uses)
}

// optional double ReductionPercent = 7;
inline bool Goody::_internal_has_reductionpercent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Goody::has_reductionpercent() const {
  return _internal_has_reductionpercent();
}
inline void Goody::clear_reductionpercent() {
  reductionpercent_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Goody::_internal_reductionpercent() const {
  return reductionpercent_;
}
inline double Goody::reductionpercent() const {
  // @@protoc_insertion_point(field_get:pxd.proto.Goody.ReductionPercent)
  return _internal_reductionpercent();
}
inline void Goody::_internal_set_reductionpercent(double value) {
  _has_bits_[0] |= 0x00000020u;
  reductionpercent_ = value;
}
inline void Goody::set_reductionpercent(double value) {
  _internal_set_reductionpercent(value);
  // @@protoc_insertion_point(field_set:pxd.proto.Goody.ReductionPercent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fgoody_2eproto
