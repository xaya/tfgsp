// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/armor_piece.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2farmor_5fpiece_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2farmor_5fpiece_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/fighter_move_blueprint.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2farmor_5fpiece_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2farmor_5fpiece_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2farmor_5fpiece_2eproto;
namespace pxd {
namespace proto {
class ArmorPiece;
struct ArmorPieceDefaultTypeInternal;
extern ArmorPieceDefaultTypeInternal _ArmorPiece_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::ArmorPiece* Arena::CreateMaybeMessage<::pxd::proto::ArmorPiece>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class ArmorPiece PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.ArmorPiece) */ {
 public:
  inline ArmorPiece() : ArmorPiece(nullptr) {}
  ~ArmorPiece() override;
  explicit constexpr ArmorPiece(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArmorPiece(const ArmorPiece& from);
  ArmorPiece(ArmorPiece&& from) noexcept
    : ArmorPiece() {
    *this = ::std::move(from);
  }

  inline ArmorPiece& operator=(const ArmorPiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmorPiece& operator=(ArmorPiece&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArmorPiece& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArmorPiece* internal_default_instance() {
    return reinterpret_cast<const ArmorPiece*>(
               &_ArmorPiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArmorPiece& a, ArmorPiece& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmorPiece* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArmorPiece* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArmorPiece* New() const final {
    return CreateMaybeMessage<ArmorPiece>(nullptr);
  }

  ArmorPiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArmorPiece>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArmorPiece& from);
  void MergeFrom(const ArmorPiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmorPiece* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.ArmorPiece";
  }
  protected:
  explicit ArmorPiece(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandyFieldNumber = 1,
    kArmorTypeFieldNumber = 2,
    kRewardSourceFieldNumber = 3,
    kRewardSourceIDFieldNumber = 4,
  };
  // optional string Candy = 1;
  bool has_candy() const;
  private:
  bool _internal_has_candy() const;
  public:
  void clear_candy();
  const std::string& candy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candy();
  std::string* release_candy();
  void set_allocated_candy(std::string* candy);
  private:
  const std::string& _internal_candy() const;
  void _internal_set_candy(const std::string& value);
  std::string* _internal_mutable_candy();
  public:

  // optional uint32 ArmorType = 2;
  bool has_armortype() const;
  private:
  bool _internal_has_armortype() const;
  public:
  void clear_armortype();
  ::PROTOBUF_NAMESPACE_ID::uint32 armortype() const;
  void set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_armortype() const;
  void _internal_set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 RewardSource = 3;
  bool has_rewardsource() const;
  private:
  bool _internal_has_rewardsource() const;
  public:
  void clear_rewardsource();
  ::PROTOBUF_NAMESPACE_ID::uint32 rewardsource() const;
  void set_rewardsource(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rewardsource() const;
  void _internal_set_rewardsource(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 RewardSourceID = 4;
  bool has_rewardsourceid() const;
  private:
  bool _internal_has_rewardsourceid() const;
  public:
  void clear_rewardsourceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rewardsourceid() const;
  void set_rewardsourceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rewardsourceid() const;
  void _internal_set_rewardsourceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.ArmorPiece)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 armortype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rewardsource_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rewardsourceid_;
  friend struct ::TableStruct_proto_2farmor_5fpiece_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArmorPiece

// optional string Candy = 1;
inline bool ArmorPiece::_internal_has_candy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArmorPiece::has_candy() const {
  return _internal_has_candy();
}
inline void ArmorPiece::clear_candy() {
  candy_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ArmorPiece::candy() const {
  // @@protoc_insertion_point(field_get:pxd.proto.ArmorPiece.Candy)
  return _internal_candy();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ArmorPiece::set_candy(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 candy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.ArmorPiece.Candy)
}
inline std::string* ArmorPiece::mutable_candy() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.ArmorPiece.Candy)
  return _internal_mutable_candy();
}
inline const std::string& ArmorPiece::_internal_candy() const {
  return candy_.Get();
}
inline void ArmorPiece::_internal_set_candy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  candy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ArmorPiece::_internal_mutable_candy() {
  _has_bits_[0] |= 0x00000001u;
  return candy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArmorPiece::release_candy() {
  // @@protoc_insertion_point(field_release:pxd.proto.ArmorPiece.Candy)
  if (!_internal_has_candy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return candy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArmorPiece::set_allocated_candy(std::string* candy) {
  if (candy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.ArmorPiece.Candy)
}

// optional uint32 ArmorType = 2;
inline bool ArmorPiece::_internal_has_armortype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArmorPiece::has_armortype() const {
  return _internal_has_armortype();
}
inline void ArmorPiece::clear_armortype() {
  armortype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArmorPiece::_internal_armortype() const {
  return armortype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArmorPiece::armortype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.ArmorPiece.ArmorType)
  return _internal_armortype();
}
inline void ArmorPiece::_internal_set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  armortype_ = value;
}
inline void ArmorPiece::set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_armortype(value);
  // @@protoc_insertion_point(field_set:pxd.proto.ArmorPiece.ArmorType)
}

// optional uint32 RewardSource = 3;
inline bool ArmorPiece::_internal_has_rewardsource() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArmorPiece::has_rewardsource() const {
  return _internal_has_rewardsource();
}
inline void ArmorPiece::clear_rewardsource() {
  rewardsource_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArmorPiece::_internal_rewardsource() const {
  return rewardsource_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArmorPiece::rewardsource() const {
  // @@protoc_insertion_point(field_get:pxd.proto.ArmorPiece.RewardSource)
  return _internal_rewardsource();
}
inline void ArmorPiece::_internal_set_rewardsource(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rewardsource_ = value;
}
inline void ArmorPiece::set_rewardsource(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rewardsource(value);
  // @@protoc_insertion_point(field_set:pxd.proto.ArmorPiece.RewardSource)
}

// optional uint32 RewardSourceID = 4;
inline bool ArmorPiece::_internal_has_rewardsourceid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ArmorPiece::has_rewardsourceid() const {
  return _internal_has_rewardsourceid();
}
inline void ArmorPiece::clear_rewardsourceid() {
  rewardsourceid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArmorPiece::_internal_rewardsourceid() const {
  return rewardsourceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArmorPiece::rewardsourceid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.ArmorPiece.RewardSourceID)
  return _internal_rewardsourceid();
}
inline void ArmorPiece::_internal_set_rewardsourceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rewardsourceid_ = value;
}
inline void ArmorPiece::set_rewardsourceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rewardsourceid(value);
  // @@protoc_insertion_point(field_set:pxd.proto.ArmorPiece.RewardSourceID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2farmor_5fpiece_2eproto
