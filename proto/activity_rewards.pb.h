// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/activity_rewards.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2factivity_5frewards_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2factivity_5frewards_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2factivity_5frewards_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2factivity_5frewards_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2factivity_5frewards_2eproto;
namespace pxd {
namespace proto {
class ActivityReward;
struct ActivityRewardDefaultTypeInternal;
extern ActivityRewardDefaultTypeInternal _ActivityReward_default_instance_;
class AuthoredActivityReward;
struct AuthoredActivityRewardDefaultTypeInternal;
extern AuthoredActivityRewardDefaultTypeInternal _AuthoredActivityReward_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::ActivityReward* Arena::CreateMaybeMessage<::pxd::proto::ActivityReward>(Arena*);
template<> ::pxd::proto::AuthoredActivityReward* Arena::CreateMaybeMessage<::pxd::proto::AuthoredActivityReward>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class AuthoredActivityReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.AuthoredActivityReward) */ {
 public:
  inline AuthoredActivityReward() : AuthoredActivityReward(nullptr) {}
  ~AuthoredActivityReward() override;
  explicit constexpr AuthoredActivityReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthoredActivityReward(const AuthoredActivityReward& from);
  AuthoredActivityReward(AuthoredActivityReward&& from) noexcept
    : AuthoredActivityReward() {
    *this = ::std::move(from);
  }

  inline AuthoredActivityReward& operator=(const AuthoredActivityReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthoredActivityReward& operator=(AuthoredActivityReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthoredActivityReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthoredActivityReward* internal_default_instance() {
    return reinterpret_cast<const AuthoredActivityReward*>(
               &_AuthoredActivityReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthoredActivityReward& a, AuthoredActivityReward& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthoredActivityReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthoredActivityReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthoredActivityReward* New() const final {
    return CreateMaybeMessage<AuthoredActivityReward>(nullptr);
  }

  AuthoredActivityReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthoredActivityReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthoredActivityReward& from);
  void MergeFrom(const AuthoredActivityReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthoredActivityReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.AuthoredActivityReward";
  }
  protected:
  explicit AuthoredActivityReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCraftedRecipeIdFieldNumber = 3,
    kMoveIdFieldNumber = 4,
    kAnimationIdFieldNumber = 6,
    kCandyTypeFieldNumber = 7,
    kListTableIdFieldNumber = 8,
    kTypeFieldNumber = 1,
    kGeneratedRecipeQualityFieldNumber = 2,
    kArmorTypeFieldNumber = 5,
    kWeightFieldNumber = 10,
    kQuantityFieldNumber = 9,
  };
  // optional string CraftedRecipeId = 3;
  bool has_craftedrecipeid() const;
  private:
  bool _internal_has_craftedrecipeid() const;
  public:
  void clear_craftedrecipeid();
  const std::string& craftedrecipeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_craftedrecipeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_craftedrecipeid();
  std::string* release_craftedrecipeid();
  void set_allocated_craftedrecipeid(std::string* craftedrecipeid);
  private:
  const std::string& _internal_craftedrecipeid() const;
  void _internal_set_craftedrecipeid(const std::string& value);
  std::string* _internal_mutable_craftedrecipeid();
  public:

  // optional string MoveId = 4;
  bool has_moveid() const;
  private:
  bool _internal_has_moveid() const;
  public:
  void clear_moveid();
  const std::string& moveid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_moveid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_moveid();
  std::string* release_moveid();
  void set_allocated_moveid(std::string* moveid);
  private:
  const std::string& _internal_moveid() const;
  void _internal_set_moveid(const std::string& value);
  std::string* _internal_mutable_moveid();
  public:

  // optional string AnimationId = 6;
  bool has_animationid() const;
  private:
  bool _internal_has_animationid() const;
  public:
  void clear_animationid();
  const std::string& animationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationid();
  std::string* release_animationid();
  void set_allocated_animationid(std::string* animationid);
  private:
  const std::string& _internal_animationid() const;
  void _internal_set_animationid(const std::string& value);
  std::string* _internal_mutable_animationid();
  public:

  // optional string CandyType = 7;
  bool has_candytype() const;
  private:
  bool _internal_has_candytype() const;
  public:
  void clear_candytype();
  const std::string& candytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candytype();
  std::string* release_candytype();
  void set_allocated_candytype(std::string* candytype);
  private:
  const std::string& _internal_candytype() const;
  void _internal_set_candytype(const std::string& value);
  std::string* _internal_mutable_candytype();
  public:

  // optional string ListTableId = 8;
  bool has_listtableid() const;
  private:
  bool _internal_has_listtableid() const;
  public:
  void clear_listtableid();
  const std::string& listtableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listtableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listtableid();
  std::string* release_listtableid();
  void set_allocated_listtableid(std::string* listtableid);
  private:
  const std::string& _internal_listtableid() const;
  void _internal_set_listtableid(const std::string& value);
  std::string* _internal_mutable_listtableid();
  public:

  // optional uint32 Type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 GeneratedRecipeQuality = 2;
  bool has_generatedrecipequality() const;
  private:
  bool _internal_has_generatedrecipequality() const;
  public:
  void clear_generatedrecipequality();
  ::PROTOBUF_NAMESPACE_ID::uint32 generatedrecipequality() const;
  void set_generatedrecipequality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_generatedrecipequality() const;
  void _internal_set_generatedrecipequality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ArmorType = 5;
  bool has_armortype() const;
  private:
  bool _internal_has_armortype() const;
  public:
  void clear_armortype();
  ::PROTOBUF_NAMESPACE_ID::uint32 armortype() const;
  void set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_armortype() const;
  void _internal_set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Weight = 10;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 Quantity = 9;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.AuthoredActivityReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr craftedrecipeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moveid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listtableid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 generatedrecipequality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 armortype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  ::PROTOBUF_NAMESPACE_ID::int64 quantity_;
  friend struct ::TableStruct_proto_2factivity_5frewards_2eproto;
};
// -------------------------------------------------------------------

class ActivityReward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.ActivityReward) */ {
 public:
  inline ActivityReward() : ActivityReward(nullptr) {}
  ~ActivityReward() override;
  explicit constexpr ActivityReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityReward(const ActivityReward& from);
  ActivityReward(ActivityReward&& from) noexcept
    : ActivityReward() {
    *this = ::std::move(from);
  }

  inline ActivityReward& operator=(const ActivityReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityReward& operator=(ActivityReward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityReward* internal_default_instance() {
    return reinterpret_cast<const ActivityReward*>(
               &_ActivityReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActivityReward& a, ActivityReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityReward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityReward* New() const final {
    return CreateMaybeMessage<ActivityReward>(nullptr);
  }

  ActivityReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityReward& from);
  void MergeFrom(const ActivityReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.ActivityReward";
  }
  protected:
  explicit ActivityReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 3,
    kAuthoredIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .pxd.proto.AuthoredActivityReward Rewards = 3;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::pxd::proto::AuthoredActivityReward* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredActivityReward >*
      mutable_rewards();
  private:
  const ::pxd::proto::AuthoredActivityReward& _internal_rewards(int index) const;
  ::pxd::proto::AuthoredActivityReward* _internal_add_rewards();
  public:
  const ::pxd::proto::AuthoredActivityReward& rewards(int index) const;
  ::pxd::proto::AuthoredActivityReward* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredActivityReward >&
      rewards() const;

  // optional string AuthoredId = 1;
  bool has_authoredid() const;
  private:
  bool _internal_has_authoredid() const;
  public:
  void clear_authoredid();
  const std::string& authoredid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authoredid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authoredid();
  std::string* release_authoredid();
  void set_allocated_authoredid(std::string* authoredid);
  private:
  const std::string& _internal_authoredid() const;
  void _internal_set_authoredid(const std::string& value);
  std::string* _internal_mutable_authoredid();
  public:

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.ActivityReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredActivityReward > rewards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authoredid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_proto_2factivity_5frewards_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthoredActivityReward

// optional uint32 Type = 1;
inline bool AuthoredActivityReward::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_type() const {
  return _internal_has_type();
}
inline void AuthoredActivityReward::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::type() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.Type)
  return _internal_type();
}
inline void AuthoredActivityReward::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void AuthoredActivityReward::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.Type)
}

// optional uint32 GeneratedRecipeQuality = 2;
inline bool AuthoredActivityReward::_internal_has_generatedrecipequality() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_generatedrecipequality() const {
  return _internal_has_generatedrecipequality();
}
inline void AuthoredActivityReward::clear_generatedrecipequality() {
  generatedrecipequality_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::_internal_generatedrecipequality() const {
  return generatedrecipequality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::generatedrecipequality() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.GeneratedRecipeQuality)
  return _internal_generatedrecipequality();
}
inline void AuthoredActivityReward::_internal_set_generatedrecipequality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  generatedrecipequality_ = value;
}
inline void AuthoredActivityReward::set_generatedrecipequality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_generatedrecipequality(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.GeneratedRecipeQuality)
}

// optional string CraftedRecipeId = 3;
inline bool AuthoredActivityReward::_internal_has_craftedrecipeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_craftedrecipeid() const {
  return _internal_has_craftedrecipeid();
}
inline void AuthoredActivityReward::clear_craftedrecipeid() {
  craftedrecipeid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthoredActivityReward::craftedrecipeid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.CraftedRecipeId)
  return _internal_craftedrecipeid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredActivityReward::set_craftedrecipeid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 craftedrecipeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.CraftedRecipeId)
}
inline std::string* AuthoredActivityReward::mutable_craftedrecipeid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredActivityReward.CraftedRecipeId)
  return _internal_mutable_craftedrecipeid();
}
inline const std::string& AuthoredActivityReward::_internal_craftedrecipeid() const {
  return craftedrecipeid_.Get();
}
inline void AuthoredActivityReward::_internal_set_craftedrecipeid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  craftedrecipeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredActivityReward::_internal_mutable_craftedrecipeid() {
  _has_bits_[0] |= 0x00000001u;
  return craftedrecipeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredActivityReward::release_craftedrecipeid() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredActivityReward.CraftedRecipeId)
  if (!_internal_has_craftedrecipeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return craftedrecipeid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredActivityReward::set_allocated_craftedrecipeid(std::string* craftedrecipeid) {
  if (craftedrecipeid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  craftedrecipeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), craftedrecipeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredActivityReward.CraftedRecipeId)
}

// optional string MoveId = 4;
inline bool AuthoredActivityReward::_internal_has_moveid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_moveid() const {
  return _internal_has_moveid();
}
inline void AuthoredActivityReward::clear_moveid() {
  moveid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthoredActivityReward::moveid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.MoveId)
  return _internal_moveid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredActivityReward::set_moveid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 moveid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.MoveId)
}
inline std::string* AuthoredActivityReward::mutable_moveid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredActivityReward.MoveId)
  return _internal_mutable_moveid();
}
inline const std::string& AuthoredActivityReward::_internal_moveid() const {
  return moveid_.Get();
}
inline void AuthoredActivityReward::_internal_set_moveid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  moveid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredActivityReward::_internal_mutable_moveid() {
  _has_bits_[0] |= 0x00000002u;
  return moveid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredActivityReward::release_moveid() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredActivityReward.MoveId)
  if (!_internal_has_moveid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return moveid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredActivityReward::set_allocated_moveid(std::string* moveid) {
  if (moveid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  moveid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moveid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredActivityReward.MoveId)
}

// optional uint32 ArmorType = 5;
inline bool AuthoredActivityReward::_internal_has_armortype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_armortype() const {
  return _internal_has_armortype();
}
inline void AuthoredActivityReward::clear_armortype() {
  armortype_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::_internal_armortype() const {
  return armortype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::armortype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.ArmorType)
  return _internal_armortype();
}
inline void AuthoredActivityReward::_internal_set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  armortype_ = value;
}
inline void AuthoredActivityReward::set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_armortype(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.ArmorType)
}

// optional string AnimationId = 6;
inline bool AuthoredActivityReward::_internal_has_animationid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_animationid() const {
  return _internal_has_animationid();
}
inline void AuthoredActivityReward::clear_animationid() {
  animationid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AuthoredActivityReward::animationid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.AnimationId)
  return _internal_animationid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredActivityReward::set_animationid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.AnimationId)
}
inline std::string* AuthoredActivityReward::mutable_animationid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredActivityReward.AnimationId)
  return _internal_mutable_animationid();
}
inline const std::string& AuthoredActivityReward::_internal_animationid() const {
  return animationid_.Get();
}
inline void AuthoredActivityReward::_internal_set_animationid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredActivityReward::_internal_mutable_animationid() {
  _has_bits_[0] |= 0x00000004u;
  return animationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredActivityReward::release_animationid() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredActivityReward.AnimationId)
  if (!_internal_has_animationid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return animationid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredActivityReward::set_allocated_animationid(std::string* animationid) {
  if (animationid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  animationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredActivityReward.AnimationId)
}

// optional string CandyType = 7;
inline bool AuthoredActivityReward::_internal_has_candytype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_candytype() const {
  return _internal_has_candytype();
}
inline void AuthoredActivityReward::clear_candytype() {
  candytype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AuthoredActivityReward::candytype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.CandyType)
  return _internal_candytype();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredActivityReward::set_candytype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.CandyType)
}
inline std::string* AuthoredActivityReward::mutable_candytype() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredActivityReward.CandyType)
  return _internal_mutable_candytype();
}
inline const std::string& AuthoredActivityReward::_internal_candytype() const {
  return candytype_.Get();
}
inline void AuthoredActivityReward::_internal_set_candytype(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredActivityReward::_internal_mutable_candytype() {
  _has_bits_[0] |= 0x00000008u;
  return candytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredActivityReward::release_candytype() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredActivityReward.CandyType)
  if (!_internal_has_candytype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return candytype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredActivityReward::set_allocated_candytype(std::string* candytype) {
  if (candytype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  candytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredActivityReward.CandyType)
}

// optional string ListTableId = 8;
inline bool AuthoredActivityReward::_internal_has_listtableid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_listtableid() const {
  return _internal_has_listtableid();
}
inline void AuthoredActivityReward::clear_listtableid() {
  listtableid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AuthoredActivityReward::listtableid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.ListTableId)
  return _internal_listtableid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredActivityReward::set_listtableid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 listtableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.ListTableId)
}
inline std::string* AuthoredActivityReward::mutable_listtableid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredActivityReward.ListTableId)
  return _internal_mutable_listtableid();
}
inline const std::string& AuthoredActivityReward::_internal_listtableid() const {
  return listtableid_.Get();
}
inline void AuthoredActivityReward::_internal_set_listtableid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  listtableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredActivityReward::_internal_mutable_listtableid() {
  _has_bits_[0] |= 0x00000010u;
  return listtableid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredActivityReward::release_listtableid() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredActivityReward.ListTableId)
  if (!_internal_has_listtableid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return listtableid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredActivityReward::set_allocated_listtableid(std::string* listtableid) {
  if (listtableid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  listtableid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listtableid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredActivityReward.ListTableId)
}

// optional int64 Quantity = 9;
inline bool AuthoredActivityReward::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_quantity() const {
  return _internal_has_quantity();
}
inline void AuthoredActivityReward::clear_quantity() {
  quantity_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthoredActivityReward::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthoredActivityReward::quantity() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.Quantity)
  return _internal_quantity();
}
inline void AuthoredActivityReward::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  quantity_ = value;
}
inline void AuthoredActivityReward::set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.Quantity)
}

// optional uint32 Weight = 10;
inline bool AuthoredActivityReward::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AuthoredActivityReward::has_weight() const {
  return _internal_has_weight();
}
inline void AuthoredActivityReward::clear_weight() {
  weight_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredActivityReward::weight() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredActivityReward.Weight)
  return _internal_weight();
}
inline void AuthoredActivityReward::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  weight_ = value;
}
inline void AuthoredActivityReward::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredActivityReward.Weight)
}

// -------------------------------------------------------------------

// ActivityReward

// optional string AuthoredId = 1;
inline bool ActivityReward::_internal_has_authoredid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActivityReward::has_authoredid() const {
  return _internal_has_authoredid();
}
inline void ActivityReward::clear_authoredid() {
  authoredid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityReward::authoredid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.ActivityReward.AuthoredId)
  return _internal_authoredid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ActivityReward::set_authoredid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.ActivityReward.AuthoredId)
}
inline std::string* ActivityReward::mutable_authoredid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.ActivityReward.AuthoredId)
  return _internal_mutable_authoredid();
}
inline const std::string& ActivityReward::_internal_authoredid() const {
  return authoredid_.Get();
}
inline void ActivityReward::_internal_set_authoredid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ActivityReward::_internal_mutable_authoredid() {
  _has_bits_[0] |= 0x00000001u;
  return authoredid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActivityReward::release_authoredid() {
  // @@protoc_insertion_point(field_release:pxd.proto.ActivityReward.AuthoredId)
  if (!_internal_has_authoredid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return authoredid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivityReward::set_allocated_authoredid(std::string* authoredid) {
  if (authoredid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  authoredid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authoredid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.ActivityReward.AuthoredId)
}

// optional string Name = 2;
inline bool ActivityReward::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActivityReward::has_name() const {
  return _internal_has_name();
}
inline void ActivityReward::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActivityReward::name() const {
  // @@protoc_insertion_point(field_get:pxd.proto.ActivityReward.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ActivityReward::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.ActivityReward.Name)
}
inline std::string* ActivityReward::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.ActivityReward.Name)
  return _internal_mutable_name();
}
inline const std::string& ActivityReward::_internal_name() const {
  return name_.Get();
}
inline void ActivityReward::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ActivityReward::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActivityReward::release_name() {
  // @@protoc_insertion_point(field_release:pxd.proto.ActivityReward.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivityReward::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.ActivityReward.Name)
}

// repeated .pxd.proto.AuthoredActivityReward Rewards = 3;
inline int ActivityReward::_internal_rewards_size() const {
  return rewards_.size();
}
inline int ActivityReward::rewards_size() const {
  return _internal_rewards_size();
}
inline void ActivityReward::clear_rewards() {
  rewards_.Clear();
}
inline ::pxd::proto::AuthoredActivityReward* ActivityReward::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:pxd.proto.ActivityReward.Rewards)
  return rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredActivityReward >*
ActivityReward::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:pxd.proto.ActivityReward.Rewards)
  return &rewards_;
}
inline const ::pxd::proto::AuthoredActivityReward& ActivityReward::_internal_rewards(int index) const {
  return rewards_.Get(index);
}
inline const ::pxd::proto::AuthoredActivityReward& ActivityReward::rewards(int index) const {
  // @@protoc_insertion_point(field_get:pxd.proto.ActivityReward.Rewards)
  return _internal_rewards(index);
}
inline ::pxd::proto::AuthoredActivityReward* ActivityReward::_internal_add_rewards() {
  return rewards_.Add();
}
inline ::pxd::proto::AuthoredActivityReward* ActivityReward::add_rewards() {
  // @@protoc_insertion_point(field_add:pxd.proto.ActivityReward.Rewards)
  return _internal_add_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredActivityReward >&
ActivityReward::rewards() const {
  // @@protoc_insertion_point(field_list:pxd.proto.ActivityReward.Rewards)
  return rewards_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2factivity_5frewards_2eproto
