// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/fighter.proto

#include "proto/fighter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pxd {
namespace proto {
constexpr Fighter::Fighter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : moves_()
  , armorpieces_()
  , recipeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fightertypeid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , animationid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tournamentinstanceid_(0u)
  , quality_(0u)
  , rating_(0u)
  , sweetness_(0u)
  , highestappliedsweetener_(0u){}
struct FighterDefaultTypeInternal {
  constexpr FighterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FighterDefaultTypeInternal() {}
  union {
    Fighter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FighterDefaultTypeInternal _Fighter_default_instance_;
}  // namespace proto
}  // namespace pxd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2ffighter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2ffighter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2ffighter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2ffighter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, recipeid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, tournamentinstanceid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, fightertypeid_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, quality_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, rating_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, sweetness_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, highestappliedsweetener_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, moves_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, armorpieces_),
  PROTOBUF_FIELD_OFFSET(::pxd::proto::Fighter, animationid_),
  0,
  3,
  1,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pxd::proto::Fighter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pxd::proto::_Fighter_default_instance_),
};

const char descriptor_table_protodef_proto_2ffighter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto/fighter.proto\022\tpxd.proto\032\"proto/"
  "fighter_move_blueprint.proto\032\027proto/armo"
  "r_piece.proto\"\365\001\n\007Fighter\022\020\n\010RecipeId\030\001 "
  "\001(\t\022\034\n\024TournamentInstanceID\030\002 \001(\r\022\025\n\rFig"
  "hterTypeId\030\003 \001(\t\022\017\n\007Quality\030\004 \001(\r\022\016\n\006Rat"
  "ing\030\005 \001(\r\022\021\n\tSweetness\030\006 \001(\r\022\037\n\027HighestA"
  "ppliedSweetener\030\007 \001(\r\022\r\n\005Moves\030\010 \003(\t\022*\n\013"
  "ArmorPieces\030\t \003(\0132\025.pxd.proto.ArmorPiece"
  "\022\023\n\013AnimationID\030\n \001(\tB\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2ffighter_2eproto_deps[2] = {
  &::descriptor_table_proto_2farmor_5fpiece_2eproto,
  &::descriptor_table_proto_2ffighter_5fmove_5fblueprint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2ffighter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ffighter_2eproto = {
  false, false, 346, descriptor_table_protodef_proto_2ffighter_2eproto, "proto/fighter.proto", 
  &descriptor_table_proto_2ffighter_2eproto_once, descriptor_table_proto_2ffighter_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2ffighter_2eproto::offsets,
  file_level_metadata_proto_2ffighter_2eproto, file_level_enum_descriptors_proto_2ffighter_2eproto, file_level_service_descriptors_proto_2ffighter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2ffighter_2eproto_getter() {
  return &descriptor_table_proto_2ffighter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2ffighter_2eproto(&descriptor_table_proto_2ffighter_2eproto);
namespace pxd {
namespace proto {

// ===================================================================

class Fighter::_Internal {
 public:
  using HasBits = decltype(std::declval<Fighter>()._has_bits_);
  static void set_has_recipeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tournamentinstanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fightertypeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sweetness(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_highestappliedsweetener(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_animationid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void Fighter::clear_armorpieces() {
  armorpieces_.Clear();
}
Fighter::Fighter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  moves_(arena),
  armorpieces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pxd.proto.Fighter)
}
Fighter::Fighter(const Fighter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      moves_(from.moves_),
      armorpieces_(from.armorpieces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recipeid()) {
    recipeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recipeid(), 
      GetArena());
  }
  fightertypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fightertypeid()) {
    fightertypeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fightertypeid(), 
      GetArena());
  }
  animationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_animationid()) {
    animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_animationid(), 
      GetArena());
  }
  ::memcpy(&tournamentinstanceid_, &from.tournamentinstanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&highestappliedsweetener_) -
    reinterpret_cast<char*>(&tournamentinstanceid_)) + sizeof(highestappliedsweetener_));
  // @@protoc_insertion_point(copy_constructor:pxd.proto.Fighter)
}

void Fighter::SharedCtor() {
recipeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fightertypeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
animationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tournamentinstanceid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&highestappliedsweetener_) -
    reinterpret_cast<char*>(&tournamentinstanceid_)) + sizeof(highestappliedsweetener_));
}

Fighter::~Fighter() {
  // @@protoc_insertion_point(destructor:pxd.proto.Fighter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fighter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fightertypeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fighter::ArenaDtor(void* object) {
  Fighter* _this = reinterpret_cast< Fighter* >(object);
  (void)_this;
}
void Fighter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fighter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fighter::Clear() {
// @@protoc_insertion_point(message_clear_start:pxd.proto.Fighter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  moves_.Clear();
  armorpieces_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      recipeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      fightertypeid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      animationid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&tournamentinstanceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highestappliedsweetener_) -
        reinterpret_cast<char*>(&tournamentinstanceid_)) + sizeof(highestappliedsweetener_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fighter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string RecipeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.Fighter.RecipeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 TournamentInstanceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tournamentinstanceid(&has_bits);
          tournamentinstanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string FighterTypeId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fightertypeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.Fighter.FighterTypeId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Rating = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rating(&has_bits);
          rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 Sweetness = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sweetness(&has_bits);
          sweetness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 HighestAppliedSweetener = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_highestappliedsweetener(&has_bits);
          highestappliedsweetener_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Moves = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_moves();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.Fighter.Moves");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pxd.proto.ArmorPiece ArmorPieces = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_armorpieces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string AnimationID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_animationid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pxd.proto.Fighter.AnimationID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fighter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pxd.proto.Fighter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string RecipeId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recipeid().data(), static_cast<int>(this->_internal_recipeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.Fighter.RecipeId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recipeid(), target);
  }

  // optional uint32 TournamentInstanceID = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tournamentinstanceid(), target);
  }

  // optional string FighterTypeId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fightertypeid().data(), static_cast<int>(this->_internal_fightertypeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.Fighter.FighterTypeId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fightertypeid(), target);
  }

  // optional uint32 Quality = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quality(), target);
  }

  // optional uint32 Rating = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rating(), target);
  }

  // optional uint32 Sweetness = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sweetness(), target);
  }

  // optional uint32 HighestAppliedSweetener = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_highestappliedsweetener(), target);
  }

  // repeated string Moves = 8;
  for (int i = 0, n = this->_internal_moves_size(); i < n; i++) {
    const auto& s = this->_internal_moves(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.Fighter.Moves");
    target = stream->WriteString(8, s, target);
  }

  // repeated .pxd.proto.ArmorPiece ArmorPieces = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_armorpieces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_armorpieces(i), target, stream);
  }

  // optional string AnimationID = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animationid().data(), static_cast<int>(this->_internal_animationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pxd.proto.Fighter.AnimationID");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_animationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pxd.proto.Fighter)
  return target;
}

size_t Fighter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pxd.proto.Fighter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Moves = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(moves_.size());
  for (int i = 0, n = moves_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      moves_.Get(i));
  }

  // repeated .pxd.proto.ArmorPiece ArmorPieces = 9;
  total_size += 1UL * this->_internal_armorpieces_size();
  for (const auto& msg : this->armorpieces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string RecipeId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recipeid());
    }

    // optional string FighterTypeId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fightertypeid());
    }

    // optional string AnimationID = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animationid());
    }

    // optional uint32 TournamentInstanceID = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournamentinstanceid());
    }

    // optional uint32 Quality = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional uint32 Rating = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rating());
    }

    // optional uint32 Sweetness = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sweetness());
    }

    // optional uint32 HighestAppliedSweetener = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_highestappliedsweetener());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fighter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pxd.proto.Fighter)
  GOOGLE_DCHECK_NE(&from, this);
  const Fighter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fighter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pxd.proto.Fighter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pxd.proto.Fighter)
    MergeFrom(*source);
  }
}

void Fighter::MergeFrom(const Fighter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pxd.proto.Fighter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  moves_.MergeFrom(from.moves_);
  armorpieces_.MergeFrom(from.armorpieces_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_recipeid(from._internal_recipeid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fightertypeid(from._internal_fightertypeid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_animationid(from._internal_animationid());
    }
    if (cached_has_bits & 0x00000008u) {
      tournamentinstanceid_ = from.tournamentinstanceid_;
    }
    if (cached_has_bits & 0x00000010u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      rating_ = from.rating_;
    }
    if (cached_has_bits & 0x00000040u) {
      sweetness_ = from.sweetness_;
    }
    if (cached_has_bits & 0x00000080u) {
      highestappliedsweetener_ = from.highestappliedsweetener_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fighter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pxd.proto.Fighter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fighter::CopyFrom(const Fighter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pxd.proto.Fighter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fighter::IsInitialized() const {
  return true;
}

void Fighter::InternalSwap(Fighter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  moves_.InternalSwap(&other->moves_);
  armorpieces_.InternalSwap(&other->armorpieces_);
  recipeid_.Swap(&other->recipeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fightertypeid_.Swap(&other->fightertypeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  animationid_.Swap(&other->animationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fighter, highestappliedsweetener_)
      + sizeof(Fighter::highestappliedsweetener_)
      - PROTOBUF_FIELD_OFFSET(Fighter, tournamentinstanceid_)>(
          reinterpret_cast<char*>(&tournamentinstanceid_),
          reinterpret_cast<char*>(&other->tournamentinstanceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fighter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2ffighter_2eproto_getter, &descriptor_table_proto_2ffighter_2eproto_once,
      file_level_metadata_proto_2ffighter_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pxd::proto::Fighter* Arena::CreateMaybeMessage< ::pxd::proto::Fighter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pxd::proto::Fighter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
