// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/crafted_recipe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcrafted_5frecipe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcrafted_5frecipe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcrafted_5frecipe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcrafted_5frecipe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcrafted_5frecipe_2eproto;
namespace pxd {
namespace proto {
class AuthoredArmor;
struct AuthoredArmorDefaultTypeInternal;
extern AuthoredArmorDefaultTypeInternal _AuthoredArmor_default_instance_;
class CandyAmount;
struct CandyAmountDefaultTypeInternal;
extern CandyAmountDefaultTypeInternal _CandyAmount_default_instance_;
class CraftedRecipe;
struct CraftedRecipeDefaultTypeInternal;
extern CraftedRecipeDefaultTypeInternal _CraftedRecipe_default_instance_;
}  // namespace proto
}  // namespace pxd
PROTOBUF_NAMESPACE_OPEN
template<> ::pxd::proto::AuthoredArmor* Arena::CreateMaybeMessage<::pxd::proto::AuthoredArmor>(Arena*);
template<> ::pxd::proto::CandyAmount* Arena::CreateMaybeMessage<::pxd::proto::CandyAmount>(Arena*);
template<> ::pxd::proto::CraftedRecipe* Arena::CreateMaybeMessage<::pxd::proto::CraftedRecipe>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pxd {
namespace proto {

// ===================================================================

class AuthoredArmor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.AuthoredArmor) */ {
 public:
  inline AuthoredArmor() : AuthoredArmor(nullptr) {}
  ~AuthoredArmor() override;
  explicit constexpr AuthoredArmor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthoredArmor(const AuthoredArmor& from);
  AuthoredArmor(AuthoredArmor&& from) noexcept
    : AuthoredArmor() {
    *this = ::std::move(from);
  }

  inline AuthoredArmor& operator=(const AuthoredArmor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthoredArmor& operator=(AuthoredArmor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthoredArmor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthoredArmor* internal_default_instance() {
    return reinterpret_cast<const AuthoredArmor*>(
               &_AuthoredArmor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthoredArmor& a, AuthoredArmor& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthoredArmor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthoredArmor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthoredArmor* New() const final {
    return CreateMaybeMessage<AuthoredArmor>(nullptr);
  }

  AuthoredArmor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthoredArmor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthoredArmor& from);
  void MergeFrom(const AuthoredArmor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthoredArmor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.AuthoredArmor";
  }
  protected:
  explicit AuthoredArmor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandyTypeFieldNumber = 1,
    kArmorTypeFieldNumber = 2,
  };
  // optional string candyType = 1;
  bool has_candytype() const;
  private:
  bool _internal_has_candytype() const;
  public:
  void clear_candytype();
  const std::string& candytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candytype();
  std::string* release_candytype();
  void set_allocated_candytype(std::string* candytype);
  private:
  const std::string& _internal_candytype() const;
  void _internal_set_candytype(const std::string& value);
  std::string* _internal_mutable_candytype();
  public:

  // optional uint32 armorType = 2;
  bool has_armortype() const;
  private:
  bool _internal_has_armortype() const;
  public:
  void clear_armortype();
  ::PROTOBUF_NAMESPACE_ID::uint32 armortype() const;
  void set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_armortype() const;
  void _internal_set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.AuthoredArmor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candytype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 armortype_;
  friend struct ::TableStruct_proto_2fcrafted_5frecipe_2eproto;
};
// -------------------------------------------------------------------

class CandyAmount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.CandyAmount) */ {
 public:
  inline CandyAmount() : CandyAmount(nullptr) {}
  ~CandyAmount() override;
  explicit constexpr CandyAmount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandyAmount(const CandyAmount& from);
  CandyAmount(CandyAmount&& from) noexcept
    : CandyAmount() {
    *this = ::std::move(from);
  }

  inline CandyAmount& operator=(const CandyAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandyAmount& operator=(CandyAmount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandyAmount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandyAmount* internal_default_instance() {
    return reinterpret_cast<const CandyAmount*>(
               &_CandyAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CandyAmount& a, CandyAmount& b) {
    a.Swap(&b);
  }
  inline void Swap(CandyAmount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandyAmount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandyAmount* New() const final {
    return CreateMaybeMessage<CandyAmount>(nullptr);
  }

  CandyAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandyAmount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandyAmount& from);
  void MergeFrom(const CandyAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandyAmount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.CandyAmount";
  }
  protected:
  explicit CandyAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandyTypeFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // optional string candyType = 1;
  bool has_candytype() const;
  private:
  bool _internal_has_candytype() const;
  public:
  void clear_candytype();
  const std::string& candytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candytype();
  std::string* release_candytype();
  void set_allocated_candytype(std::string* candytype);
  private:
  const std::string& _internal_candytype() const;
  void _internal_set_candytype(const std::string& value);
  std::string* _internal_mutable_candytype();
  public:

  // optional uint64 amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.CandyAmount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candytype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  friend struct ::TableStruct_proto_2fcrafted_5frecipe_2eproto;
};
// -------------------------------------------------------------------

class CraftedRecipe PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pxd.proto.CraftedRecipe) */ {
 public:
  inline CraftedRecipe() : CraftedRecipe(nullptr) {}
  ~CraftedRecipe() override;
  explicit constexpr CraftedRecipe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CraftedRecipe(const CraftedRecipe& from);
  CraftedRecipe(CraftedRecipe&& from) noexcept
    : CraftedRecipe() {
    *this = ::std::move(from);
  }

  inline CraftedRecipe& operator=(const CraftedRecipe& from) {
    CopyFrom(from);
    return *this;
  }
  inline CraftedRecipe& operator=(CraftedRecipe&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CraftedRecipe& default_instance() {
    return *internal_default_instance();
  }
  static inline const CraftedRecipe* internal_default_instance() {
    return reinterpret_cast<const CraftedRecipe*>(
               &_CraftedRecipe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CraftedRecipe& a, CraftedRecipe& b) {
    a.Swap(&b);
  }
  inline void Swap(CraftedRecipe* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CraftedRecipe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CraftedRecipe* New() const final {
    return CreateMaybeMessage<CraftedRecipe>(nullptr);
  }

  CraftedRecipe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CraftedRecipe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CraftedRecipe& from);
  void MergeFrom(const CraftedRecipe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CraftedRecipe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pxd.proto.CraftedRecipe";
  }
  protected:
  explicit CraftedRecipe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArmorFieldNumber = 3,
    kMovesFieldNumber = 8,
    kRequiredCandyFieldNumber = 11,
    kAuthoredIdFieldNumber = 1,
    kAnimationIdFieldNumber = 2,
    kNameFieldNumber = 4,
    kFighterNameFieldNumber = 6,
    kFighterTypeFieldNumber = 7,
    kDurationFieldNumber = 5,
    kQualityFieldNumber = 9,
    kIsAccountBoundFieldNumber = 10,
    kRequiredFighterQualityFieldNumber = 12,
  };
  // repeated .pxd.proto.AuthoredArmor Armor = 3;
  int armor_size() const;
  private:
  int _internal_armor_size() const;
  public:
  void clear_armor();
  ::pxd::proto::AuthoredArmor* mutable_armor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredArmor >*
      mutable_armor();
  private:
  const ::pxd::proto::AuthoredArmor& _internal_armor(int index) const;
  ::pxd::proto::AuthoredArmor* _internal_add_armor();
  public:
  const ::pxd::proto::AuthoredArmor& armor(int index) const;
  ::pxd::proto::AuthoredArmor* add_armor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredArmor >&
      armor() const;

  // repeated string Moves = 8;
  int moves_size() const;
  private:
  int _internal_moves_size() const;
  public:
  void clear_moves();
  const std::string& moves(int index) const;
  std::string* mutable_moves(int index);
  void set_moves(int index, const std::string& value);
  void set_moves(int index, std::string&& value);
  void set_moves(int index, const char* value);
  void set_moves(int index, const char* value, size_t size);
  std::string* add_moves();
  void add_moves(const std::string& value);
  void add_moves(std::string&& value);
  void add_moves(const char* value);
  void add_moves(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& moves() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_moves();
  private:
  const std::string& _internal_moves(int index) const;
  std::string* _internal_add_moves();
  public:

  // repeated .pxd.proto.CandyAmount RequiredCandy = 11;
  int requiredcandy_size() const;
  private:
  int _internal_requiredcandy_size() const;
  public:
  void clear_requiredcandy();
  ::pxd::proto::CandyAmount* mutable_requiredcandy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::CandyAmount >*
      mutable_requiredcandy();
  private:
  const ::pxd::proto::CandyAmount& _internal_requiredcandy(int index) const;
  ::pxd::proto::CandyAmount* _internal_add_requiredcandy();
  public:
  const ::pxd::proto::CandyAmount& requiredcandy(int index) const;
  ::pxd::proto::CandyAmount* add_requiredcandy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::CandyAmount >&
      requiredcandy() const;

  // optional string AuthoredId = 1;
  bool has_authoredid() const;
  private:
  bool _internal_has_authoredid() const;
  public:
  void clear_authoredid();
  const std::string& authoredid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authoredid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authoredid();
  std::string* release_authoredid();
  void set_allocated_authoredid(std::string* authoredid);
  private:
  const std::string& _internal_authoredid() const;
  void _internal_set_authoredid(const std::string& value);
  std::string* _internal_mutable_authoredid();
  public:

  // optional string AnimationId = 2;
  bool has_animationid() const;
  private:
  bool _internal_has_animationid() const;
  public:
  void clear_animationid();
  const std::string& animationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationid();
  std::string* release_animationid();
  void set_allocated_animationid(std::string* animationid);
  private:
  const std::string& _internal_animationid() const;
  void _internal_set_animationid(const std::string& value);
  std::string* _internal_mutable_animationid();
  public:

  // optional string Name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string FighterName = 6;
  bool has_fightername() const;
  private:
  bool _internal_has_fightername() const;
  public:
  void clear_fightername();
  const std::string& fightername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fightername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fightername();
  std::string* release_fightername();
  void set_allocated_fightername(std::string* fightername);
  private:
  const std::string& _internal_fightername() const;
  void _internal_set_fightername(const std::string& value);
  std::string* _internal_mutable_fightername();
  public:

  // optional string FighterType = 7;
  bool has_fightertype() const;
  private:
  bool _internal_has_fightertype() const;
  public:
  void clear_fightertype();
  const std::string& fightertype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fightertype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fightertype();
  std::string* release_fightertype();
  void set_allocated_fightertype(std::string* fightertype);
  private:
  const std::string& _internal_fightertype() const;
  void _internal_set_fightertype(const std::string& value);
  std::string* _internal_mutable_fightertype();
  public:

  // optional uint32 Duration = 5;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 Quality = 9;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool IsAccountBound = 10;
  bool has_isaccountbound() const;
  private:
  bool _internal_has_isaccountbound() const;
  public:
  void clear_isaccountbound();
  bool isaccountbound() const;
  void set_isaccountbound(bool value);
  private:
  bool _internal_isaccountbound() const;
  void _internal_set_isaccountbound(bool value);
  public:

  // optional uint32 RequiredFighterQuality = 12;
  bool has_requiredfighterquality() const;
  private:
  bool _internal_has_requiredfighterquality() const;
  public:
  void clear_requiredfighterquality();
  ::PROTOBUF_NAMESPACE_ID::uint32 requiredfighterquality() const;
  void set_requiredfighterquality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requiredfighterquality() const;
  void _internal_set_requiredfighterquality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pxd.proto.CraftedRecipe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredArmor > armor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> moves_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::CandyAmount > requiredcandy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authoredid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fightername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fightertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_;
  bool isaccountbound_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requiredfighterquality_;
  friend struct ::TableStruct_proto_2fcrafted_5frecipe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthoredArmor

// optional string candyType = 1;
inline bool AuthoredArmor::_internal_has_candytype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthoredArmor::has_candytype() const {
  return _internal_has_candytype();
}
inline void AuthoredArmor::clear_candytype() {
  candytype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthoredArmor::candytype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredArmor.candyType)
  return _internal_candytype();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AuthoredArmor::set_candytype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredArmor.candyType)
}
inline std::string* AuthoredArmor::mutable_candytype() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.AuthoredArmor.candyType)
  return _internal_mutable_candytype();
}
inline const std::string& AuthoredArmor::_internal_candytype() const {
  return candytype_.Get();
}
inline void AuthoredArmor::_internal_set_candytype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AuthoredArmor::_internal_mutable_candytype() {
  _has_bits_[0] |= 0x00000001u;
  return candytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthoredArmor::release_candytype() {
  // @@protoc_insertion_point(field_release:pxd.proto.AuthoredArmor.candyType)
  if (!_internal_has_candytype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return candytype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthoredArmor::set_allocated_candytype(std::string* candytype) {
  if (candytype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.AuthoredArmor.candyType)
}

// optional uint32 armorType = 2;
inline bool AuthoredArmor::_internal_has_armortype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthoredArmor::has_armortype() const {
  return _internal_has_armortype();
}
inline void AuthoredArmor::clear_armortype() {
  armortype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredArmor::_internal_armortype() const {
  return armortype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthoredArmor::armortype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.AuthoredArmor.armorType)
  return _internal_armortype();
}
inline void AuthoredArmor::_internal_set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  armortype_ = value;
}
inline void AuthoredArmor::set_armortype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_armortype(value);
  // @@protoc_insertion_point(field_set:pxd.proto.AuthoredArmor.armorType)
}

// -------------------------------------------------------------------

// CandyAmount

// optional string candyType = 1;
inline bool CandyAmount::_internal_has_candytype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CandyAmount::has_candytype() const {
  return _internal_has_candytype();
}
inline void CandyAmount::clear_candytype() {
  candytype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CandyAmount::candytype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CandyAmount.candyType)
  return _internal_candytype();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CandyAmount::set_candytype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.CandyAmount.candyType)
}
inline std::string* CandyAmount::mutable_candytype() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CandyAmount.candyType)
  return _internal_mutable_candytype();
}
inline const std::string& CandyAmount::_internal_candytype() const {
  return candytype_.Get();
}
inline void CandyAmount::_internal_set_candytype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  candytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CandyAmount::_internal_mutable_candytype() {
  _has_bits_[0] |= 0x00000001u;
  return candytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CandyAmount::release_candytype() {
  // @@protoc_insertion_point(field_release:pxd.proto.CandyAmount.candyType)
  if (!_internal_has_candytype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return candytype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CandyAmount::set_allocated_candytype(std::string* candytype) {
  if (candytype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.CandyAmount.candyType)
}

// optional uint64 amount = 2;
inline bool CandyAmount::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CandyAmount::has_amount() const {
  return _internal_has_amount();
}
inline void CandyAmount::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandyAmount::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandyAmount::amount() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CandyAmount.amount)
  return _internal_amount();
}
inline void CandyAmount::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
}
inline void CandyAmount::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:pxd.proto.CandyAmount.amount)
}

// -------------------------------------------------------------------

// CraftedRecipe

// optional string AuthoredId = 1;
inline bool CraftedRecipe::_internal_has_authoredid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CraftedRecipe::has_authoredid() const {
  return _internal_has_authoredid();
}
inline void CraftedRecipe::clear_authoredid() {
  authoredid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CraftedRecipe::authoredid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.AuthoredId)
  return _internal_authoredid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CraftedRecipe::set_authoredid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.AuthoredId)
}
inline std::string* CraftedRecipe::mutable_authoredid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.AuthoredId)
  return _internal_mutable_authoredid();
}
inline const std::string& CraftedRecipe::_internal_authoredid() const {
  return authoredid_.Get();
}
inline void CraftedRecipe::_internal_set_authoredid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  authoredid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CraftedRecipe::_internal_mutable_authoredid() {
  _has_bits_[0] |= 0x00000001u;
  return authoredid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CraftedRecipe::release_authoredid() {
  // @@protoc_insertion_point(field_release:pxd.proto.CraftedRecipe.AuthoredId)
  if (!_internal_has_authoredid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return authoredid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CraftedRecipe::set_allocated_authoredid(std::string* authoredid) {
  if (authoredid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  authoredid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authoredid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.CraftedRecipe.AuthoredId)
}

// optional string AnimationId = 2;
inline bool CraftedRecipe::_internal_has_animationid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CraftedRecipe::has_animationid() const {
  return _internal_has_animationid();
}
inline void CraftedRecipe::clear_animationid() {
  animationid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CraftedRecipe::animationid() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.AnimationId)
  return _internal_animationid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CraftedRecipe::set_animationid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.AnimationId)
}
inline std::string* CraftedRecipe::mutable_animationid() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.AnimationId)
  return _internal_mutable_animationid();
}
inline const std::string& CraftedRecipe::_internal_animationid() const {
  return animationid_.Get();
}
inline void CraftedRecipe::_internal_set_animationid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  animationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CraftedRecipe::_internal_mutable_animationid() {
  _has_bits_[0] |= 0x00000002u;
  return animationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CraftedRecipe::release_animationid() {
  // @@protoc_insertion_point(field_release:pxd.proto.CraftedRecipe.AnimationId)
  if (!_internal_has_animationid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return animationid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CraftedRecipe::set_allocated_animationid(std::string* animationid) {
  if (animationid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  animationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.CraftedRecipe.AnimationId)
}

// repeated .pxd.proto.AuthoredArmor Armor = 3;
inline int CraftedRecipe::_internal_armor_size() const {
  return armor_.size();
}
inline int CraftedRecipe::armor_size() const {
  return _internal_armor_size();
}
inline void CraftedRecipe::clear_armor() {
  armor_.Clear();
}
inline ::pxd::proto::AuthoredArmor* CraftedRecipe::mutable_armor(int index) {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.Armor)
  return armor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredArmor >*
CraftedRecipe::mutable_armor() {
  // @@protoc_insertion_point(field_mutable_list:pxd.proto.CraftedRecipe.Armor)
  return &armor_;
}
inline const ::pxd::proto::AuthoredArmor& CraftedRecipe::_internal_armor(int index) const {
  return armor_.Get(index);
}
inline const ::pxd::proto::AuthoredArmor& CraftedRecipe::armor(int index) const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.Armor)
  return _internal_armor(index);
}
inline ::pxd::proto::AuthoredArmor* CraftedRecipe::_internal_add_armor() {
  return armor_.Add();
}
inline ::pxd::proto::AuthoredArmor* CraftedRecipe::add_armor() {
  // @@protoc_insertion_point(field_add:pxd.proto.CraftedRecipe.Armor)
  return _internal_add_armor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::AuthoredArmor >&
CraftedRecipe::armor() const {
  // @@protoc_insertion_point(field_list:pxd.proto.CraftedRecipe.Armor)
  return armor_;
}

// optional string Name = 4;
inline bool CraftedRecipe::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CraftedRecipe::has_name() const {
  return _internal_has_name();
}
inline void CraftedRecipe::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CraftedRecipe::name() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CraftedRecipe::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.Name)
}
inline std::string* CraftedRecipe::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.Name)
  return _internal_mutable_name();
}
inline const std::string& CraftedRecipe::_internal_name() const {
  return name_.Get();
}
inline void CraftedRecipe::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CraftedRecipe::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CraftedRecipe::release_name() {
  // @@protoc_insertion_point(field_release:pxd.proto.CraftedRecipe.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CraftedRecipe::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.CraftedRecipe.Name)
}

// optional uint32 Duration = 5;
inline bool CraftedRecipe::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CraftedRecipe::has_duration() const {
  return _internal_has_duration();
}
inline void CraftedRecipe::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CraftedRecipe::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CraftedRecipe::duration() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.Duration)
  return _internal_duration();
}
inline void CraftedRecipe::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  duration_ = value;
}
inline void CraftedRecipe::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.Duration)
}

// optional string FighterName = 6;
inline bool CraftedRecipe::_internal_has_fightername() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CraftedRecipe::has_fightername() const {
  return _internal_has_fightername();
}
inline void CraftedRecipe::clear_fightername() {
  fightername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CraftedRecipe::fightername() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.FighterName)
  return _internal_fightername();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CraftedRecipe::set_fightername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 fightername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.FighterName)
}
inline std::string* CraftedRecipe::mutable_fightername() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.FighterName)
  return _internal_mutable_fightername();
}
inline const std::string& CraftedRecipe::_internal_fightername() const {
  return fightername_.Get();
}
inline void CraftedRecipe::_internal_set_fightername(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  fightername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CraftedRecipe::_internal_mutable_fightername() {
  _has_bits_[0] |= 0x00000008u;
  return fightername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CraftedRecipe::release_fightername() {
  // @@protoc_insertion_point(field_release:pxd.proto.CraftedRecipe.FighterName)
  if (!_internal_has_fightername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return fightername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CraftedRecipe::set_allocated_fightername(std::string* fightername) {
  if (fightername != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  fightername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fightername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.CraftedRecipe.FighterName)
}

// optional string FighterType = 7;
inline bool CraftedRecipe::_internal_has_fightertype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CraftedRecipe::has_fightertype() const {
  return _internal_has_fightertype();
}
inline void CraftedRecipe::clear_fightertype() {
  fightertype_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CraftedRecipe::fightertype() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.FighterType)
  return _internal_fightertype();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CraftedRecipe::set_fightertype(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 fightertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.FighterType)
}
inline std::string* CraftedRecipe::mutable_fightertype() {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.FighterType)
  return _internal_mutable_fightertype();
}
inline const std::string& CraftedRecipe::_internal_fightertype() const {
  return fightertype_.Get();
}
inline void CraftedRecipe::_internal_set_fightertype(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  fightertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CraftedRecipe::_internal_mutable_fightertype() {
  _has_bits_[0] |= 0x00000010u;
  return fightertype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CraftedRecipe::release_fightertype() {
  // @@protoc_insertion_point(field_release:pxd.proto.CraftedRecipe.FighterType)
  if (!_internal_has_fightertype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return fightertype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CraftedRecipe::set_allocated_fightertype(std::string* fightertype) {
  if (fightertype != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  fightertype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fightertype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pxd.proto.CraftedRecipe.FighterType)
}

// repeated string Moves = 8;
inline int CraftedRecipe::_internal_moves_size() const {
  return moves_.size();
}
inline int CraftedRecipe::moves_size() const {
  return _internal_moves_size();
}
inline void CraftedRecipe::clear_moves() {
  moves_.Clear();
}
inline std::string* CraftedRecipe::add_moves() {
  // @@protoc_insertion_point(field_add_mutable:pxd.proto.CraftedRecipe.Moves)
  return _internal_add_moves();
}
inline const std::string& CraftedRecipe::_internal_moves(int index) const {
  return moves_.Get(index);
}
inline const std::string& CraftedRecipe::moves(int index) const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.Moves)
  return _internal_moves(index);
}
inline std::string* CraftedRecipe::mutable_moves(int index) {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.Moves)
  return moves_.Mutable(index);
}
inline void CraftedRecipe::set_moves(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.Moves)
  moves_.Mutable(index)->assign(value);
}
inline void CraftedRecipe::set_moves(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.Moves)
  moves_.Mutable(index)->assign(std::move(value));
}
inline void CraftedRecipe::set_moves(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  moves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pxd.proto.CraftedRecipe.Moves)
}
inline void CraftedRecipe::set_moves(int index, const char* value, size_t size) {
  moves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pxd.proto.CraftedRecipe.Moves)
}
inline std::string* CraftedRecipe::_internal_add_moves() {
  return moves_.Add();
}
inline void CraftedRecipe::add_moves(const std::string& value) {
  moves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pxd.proto.CraftedRecipe.Moves)
}
inline void CraftedRecipe::add_moves(std::string&& value) {
  moves_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pxd.proto.CraftedRecipe.Moves)
}
inline void CraftedRecipe::add_moves(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  moves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pxd.proto.CraftedRecipe.Moves)
}
inline void CraftedRecipe::add_moves(const char* value, size_t size) {
  moves_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pxd.proto.CraftedRecipe.Moves)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CraftedRecipe::moves() const {
  // @@protoc_insertion_point(field_list:pxd.proto.CraftedRecipe.Moves)
  return moves_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CraftedRecipe::mutable_moves() {
  // @@protoc_insertion_point(field_mutable_list:pxd.proto.CraftedRecipe.Moves)
  return &moves_;
}

// optional uint32 Quality = 9;
inline bool CraftedRecipe::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CraftedRecipe::has_quality() const {
  return _internal_has_quality();
}
inline void CraftedRecipe::clear_quality() {
  quality_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CraftedRecipe::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CraftedRecipe::quality() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.Quality)
  return _internal_quality();
}
inline void CraftedRecipe::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  quality_ = value;
}
inline void CraftedRecipe::set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.Quality)
}

// optional bool IsAccountBound = 10;
inline bool CraftedRecipe::_internal_has_isaccountbound() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CraftedRecipe::has_isaccountbound() const {
  return _internal_has_isaccountbound();
}
inline void CraftedRecipe::clear_isaccountbound() {
  isaccountbound_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CraftedRecipe::_internal_isaccountbound() const {
  return isaccountbound_;
}
inline bool CraftedRecipe::isaccountbound() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.IsAccountBound)
  return _internal_isaccountbound();
}
inline void CraftedRecipe::_internal_set_isaccountbound(bool value) {
  _has_bits_[0] |= 0x00000080u;
  isaccountbound_ = value;
}
inline void CraftedRecipe::set_isaccountbound(bool value) {
  _internal_set_isaccountbound(value);
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.IsAccountBound)
}

// repeated .pxd.proto.CandyAmount RequiredCandy = 11;
inline int CraftedRecipe::_internal_requiredcandy_size() const {
  return requiredcandy_.size();
}
inline int CraftedRecipe::requiredcandy_size() const {
  return _internal_requiredcandy_size();
}
inline void CraftedRecipe::clear_requiredcandy() {
  requiredcandy_.Clear();
}
inline ::pxd::proto::CandyAmount* CraftedRecipe::mutable_requiredcandy(int index) {
  // @@protoc_insertion_point(field_mutable:pxd.proto.CraftedRecipe.RequiredCandy)
  return requiredcandy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::CandyAmount >*
CraftedRecipe::mutable_requiredcandy() {
  // @@protoc_insertion_point(field_mutable_list:pxd.proto.CraftedRecipe.RequiredCandy)
  return &requiredcandy_;
}
inline const ::pxd::proto::CandyAmount& CraftedRecipe::_internal_requiredcandy(int index) const {
  return requiredcandy_.Get(index);
}
inline const ::pxd::proto::CandyAmount& CraftedRecipe::requiredcandy(int index) const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.RequiredCandy)
  return _internal_requiredcandy(index);
}
inline ::pxd::proto::CandyAmount* CraftedRecipe::_internal_add_requiredcandy() {
  return requiredcandy_.Add();
}
inline ::pxd::proto::CandyAmount* CraftedRecipe::add_requiredcandy() {
  // @@protoc_insertion_point(field_add:pxd.proto.CraftedRecipe.RequiredCandy)
  return _internal_add_requiredcandy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pxd::proto::CandyAmount >&
CraftedRecipe::requiredcandy() const {
  // @@protoc_insertion_point(field_list:pxd.proto.CraftedRecipe.RequiredCandy)
  return requiredcandy_;
}

// optional uint32 RequiredFighterQuality = 12;
inline bool CraftedRecipe::_internal_has_requiredfighterquality() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CraftedRecipe::has_requiredfighterquality() const {
  return _internal_has_requiredfighterquality();
}
inline void CraftedRecipe::clear_requiredfighterquality() {
  requiredfighterquality_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CraftedRecipe::_internal_requiredfighterquality() const {
  return requiredfighterquality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CraftedRecipe::requiredfighterquality() const {
  // @@protoc_insertion_point(field_get:pxd.proto.CraftedRecipe.RequiredFighterQuality)
  return _internal_requiredfighterquality();
}
inline void CraftedRecipe::_internal_set_requiredfighterquality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  requiredfighterquality_ = value;
}
inline void CraftedRecipe::set_requiredfighterquality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requiredfighterquality(value);
  // @@protoc_insertion_point(field_set:pxd.proto.CraftedRecipe.RequiredFighterQuality)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pxd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcrafted_5frecipe_2eproto
